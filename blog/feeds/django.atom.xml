<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>datapythonista blog - Django</title><link href="https://datapythonista.github.io/blog/" rel="alternate"></link><link href="https://datapythonista.github.io/blog/feeds/django.atom.xml" rel="self"></link><id>https://datapythonista.github.io/blog/</id><updated>2009-12-22T22:52:00+00:00</updated><subtitle>about me</subtitle><entry><title>New localization system already in trunk</title><link href="https://datapythonista.github.io/blog/new-localization-system-already-in.html" rel="alternate"></link><published>2009-12-22T22:52:00+00:00</published><updated>2009-12-22T22:52:00+00:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2009-12-22:/blog/new-localization-system-already-in.html</id><summary type="html">&lt;p&gt;Just few hours ago, Django's new localization system has been commited to trunk.&lt;div&gt;
&lt;/div&gt;&lt;div&gt;As some of you know, I did most of the work as my Google Summer of Code project, this year. Of course, together with &lt;a href="http://jannisleidel.com/"&gt;Jannis Leidel&lt;/a&gt;, who also did the final steps, including the commit.&lt;/div&gt;&lt;div&gt;
&lt;/div&gt;&lt;div&gt;Summarizing, with …&lt;/div&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just few hours ago, Django's new localization system has been commited to trunk.&lt;div&gt;
&lt;/div&gt;&lt;div&gt;As some of you know, I did most of the work as my Google Summer of Code project, this year. Of course, together with &lt;a href="http://jannisleidel.com/"&gt;Jannis Leidel&lt;/a&gt;, who also did the final steps, including the commit.&lt;/div&gt;&lt;div&gt;
&lt;/div&gt;&lt;div&gt;Summarizing, with this change Django will format all displayed data, according to user's current locale. For example, the calendar will display Sunday as the first day for users in the States, but Monday for users from most European countries. Also it'll format numbers and dates.&lt;/div&gt;&lt;div&gt;
&lt;/div&gt;&lt;div&gt;You can check the slides I presented at DjangoCon.&lt;/div&gt;&lt;div&gt;&lt;a href="http://docs.google.com/present/view?id=dfbzs3ks_16d26xjbd9"&gt;http://docs.google.com/present/view?id=dfbzs3ks_16d26xjbd9&lt;/a&gt;&lt;/div&gt;&lt;div&gt;
&lt;/div&gt;&lt;div&gt;Note that the setting is no longer USE_FORMAT_I18N (as in the slides), but USE_L10N.&lt;/div&gt;&lt;div&gt;
&lt;/div&gt;&lt;div&gt;You can also check the commit at:&lt;/div&gt;&lt;div&gt;&lt;a href="http://code.djangoproject.com/changeset/11964"&gt;http://code.djangoproject.com/changeset/11964&lt;/a&gt;&lt;/div&gt;&lt;div&gt;
&lt;/div&gt;&lt;div&gt;
&lt;/div&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Django"></category><category term="Django-i18n"></category></entry><entry><title>GSoC: Implementation of additional i18n features on Django</title><link href="https://datapythonista.github.io/blog/gsoc-implementation-of-additional-i18n.html" rel="alternate"></link><published>2009-04-24T19:09:00+01:00</published><updated>2009-04-24T19:09:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2009-04-24:/blog/gsoc-implementation-of-additional-i18n.html</id><summary type="html">&lt;p&gt;&lt;span&gt;&lt;span&gt;Here you have my proposal for Google Summer of Code &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2009. It was approved previous week, and I'll be working on it during this summer.&lt;/span&gt;&lt;/span&gt;&lt;span style="font-size:180%;"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;
&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;The problem
&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;While Django provides an amazing system to translate texts, and displays localized dates in some parts of the admin; it has many data …&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span&gt;&lt;span&gt;Here you have my proposal for Google Summer of Code &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;2009. It was approved previous week, and I'll be working on it during this summer.&lt;/span&gt;&lt;/span&gt;&lt;span style="font-size:180%;"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;
&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;The problem
&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;While Django provides an amazing system to translate texts, and displays localized dates in some parts of the admin; it has many data that could be internationalized, not it's not yet.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;The information that developers should be able to localize/translate is mainly:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; - &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;All  dates and related information (times, calendars...)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;All  numbers (mainly decimal ones)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Texts  (and any data in general) saved on the database&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;
 &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;More information on these issues can be found in the following blog post and this ticket:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="http://vaig.be/2008/07/django-i18n-status.html"&gt;&lt;span&gt;&lt;span&gt;http://vaig.be/2008/07/django-i18n-status.html&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="http://code.djangoproject.com/ticket/7980"&gt;&lt;span&gt;&lt;span&gt;http://code.djangoproject.com/ticket/7980&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;Proposal&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;The proposed solution for improving Django i18n includes several different tasks. Those tasks are:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Import  locale data from CLDR&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Apply  i18n to Django dates and times&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Apply  i18n to Django numbers&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Allow  translating content on the database&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt;&lt;span&gt;&lt;span&gt;Fix already reported bug about i18n
&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Next are the details for every task. Note that all those specifications are subject to change, according to discussions with the mentor of the project, Django core developers team, and the main Django community.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;Importing locale data
&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;The main repository of locale data is the Common Locale Data Repository (CLDR) by the Unicode Consortium &lt;/span&gt;&lt;/span&gt;http://cldr.unicode.org/.&lt;span&gt;&lt;span&gt; It provides a set of XML files with information such as date, time and number formatting for most languages.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;The idea of this task would be to create a python script (probably as a django-admin command), that will extract all necessary data from those XML files and put it into configuration files on the Django structure. This information will be used by Django to internationalize data on applications.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;The idea of this script is to be used just by Django developers. It would mainly be a one-time execution script, and then it would be executed just when new locales are added (are some are changed).&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;All information gathered from CLDR files could be saved on django/conf/locale/{  language code }/formats/django.po&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Specific settings imported from CLDR could be (with English localized example):&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; - &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;SHORT_DATETIME_FORMAT  (12-31-2000 11:59 p.m.)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;LONG_DATETIME_FORMAT  (December 31th 2000, 11:59 p.m.)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;SHORT_DATE_FORMAT  (12-31-2000)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;LONG_DATE_FORMAT  (December 31th 2000)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;FIRST_DAY_OF_WEEK  (0 meaning Sunday)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;TIME_FORMAT  (11:59 p.m.)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;YEAR_MONTH_FORMAT  (December of 2000)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;MONTH_DAY_FORMAT  (December 31th)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;
 - &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;DECIMAL_NUMBER  FORMAT (1,000,000.123)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;
 &lt;p&gt;&lt;span&gt;&lt;span&gt;There are some locale based parameters that already exist on Django, on translation files (LC_MESSAGES) and could be deprecated on future releases of Django (when breaking backward compatibility). Those are:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; - &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;DATETIME_FORMAT&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;DATE_FORMAT&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;TIME_FORMAT&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;YEAR_MONTH_FORMAT&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;MONTH_DAY_FORMAT&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;
 &lt;p&gt;For keeping the system flexible, existing default values on settings will be kept. Probably it would be worth to add new ones for the new customizable formats.&lt;/p&gt; &lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;Dates, times and calendar i18n&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;All dates and times displayed using Django should use the format defined for the current session locale. This is already implemented for some dates, like the ones displayed in admin's lists. Also a filter for formatting dates already exists in templates, which, together with the formats in the translation files, can do the job. But the good way to do that would be displaying the date by default on the session locale.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;All Django forms (including admin forms) should accept the short date/datetime format of the current locale. Now it's possible to define the accepted formats using parameters of the widget, and this can be kept, but at least support for entering data formatted in current locale should be added. ISO and/or English locale can be kept as well. Existing data on input fields should be displayed in current locale too.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;As Django 1.0 series is maintaining backward compatibility, those changes have to be implemented being compatible with existing behavior by default.&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;The calendar on admin's date/datetime field should also be displayed according to user session locale.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;So basically those are the main tasks required for internationalizing Django dates:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; - &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Format all python date/datetimes objects using locale settings when converted to string to be displayed. Basically it means models.DateField and models.DateTimeField values on model instances.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Change  input widgets to display data and to allow entering data on the  format of the current locale.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Display  admin calendar starting weeks on the day defined for current locale.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;
 &lt;p&gt;&lt;span&gt;&lt;span&gt;With those changes next tickets would be fixed:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; - &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;#1061  About first day on calendars&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;#5526  About accepting non-English formats on input widgets&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;#6231  About the output format of the SelectDateWidget&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;#6449  About default format of displayed dates&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;#6483  About supporting European dates on javascript routines&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;#7509  About supporting different formats on SplitDateTimeWidget&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;#7656  About inheriting i18n features of AdminDateWidget&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;
 &lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;Number i18n&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Right now, Django doesn't provide anything for localizing numbers on applications. All numeric values within Django applications are formatted using American formats. Users from many countries are not used to dealing with the American format, and a simple shop using Django can create confusion among users who, for example, expect the comma to be the decimal separator, and they find the point on prices.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;As for the previous section, changes must be applied keeping backward compatibility.&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;So Django should display, and use by default the language of the current locale to format numbers. Basically that means:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; - &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Format  numbers on templates using current session locale&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Display  and allow entering data using session locale on input widgets&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;
 &lt;p&gt;&lt;span&gt;&lt;span&gt;With those changes next ticket should be fixed:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; - &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;#3940  About comma as decimal separator&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;
 &lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;Translating dynamic content&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Django has an amazing system for translating texts to any language. The only problem of this system is that it can just be used for static content (defined on source files, including templates), and not for dynamic content, created by users after deploying the web site. This can be useful for many different situations like an application that has a product catalog where product names and descriptions have to be translated, or a news website, where news can be translated to any language.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;There are some external applications, widely used, that allow to do that on Django, but all of them have many different problems, like complex and tricky syntax for developers, ugly interface for users, bad design, bad scalability... Main applications are:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; - &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;django-multilingual&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;transdb&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;django-transmeta&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;django-multilingual-model&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;
 &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;A comparison of the two first applications, and some ideas for a better solution, can be found on a presentation at&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="http://docs.google.com/Presentation?docid=dfbzs3ks_7f2z85hvr&amp;amp;hl=en"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;http://docs.google.com/Presentation?docid=dfbzs3ks_7f2z85hvr&amp;amp;hl=en&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Basically, a good solution to allow Django developers to translate their models should include:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; - &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;An  easy way to specify translatable fields on models (or outside the  models)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;An  easy way to allow translating content using the admin or custom  forms&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;Displaying  translated fields in session language by default (allowing to get  the value for a specific value)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;A  scalable way to save translations on the database&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;
 &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;To achieve those targets a lot of analysis is required, so, just some ideas are detailed here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;For the model syntax there are many different options, some of them can be checked on this blog post, and this poll:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="http://vaig.be/2009/03/django-multilingual-syntax-poll.html"&gt;&lt;span&gt;&lt;span&gt;http://vaig.be/2009/03/django-multilingual-syntax-poll.html&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="http://doodle.com/aicvayf8ss2mxm2h"&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;http://doodle.com/aicvayf8ss2mxm2h&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;The most popular one is (using an example):&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
    ::::
    &lt;span&gt;&lt;span&gt;class MyModel(model.Model):&lt;/span&gt;&lt;/span&gt;
     &lt;span&gt;my_field = CharField()&lt;/span&gt;
     &lt;span&gt;my_i18n_field = CharField()&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;class Meta:&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;translate = (&amp;#39;my_i18n_field&amp;#39;,)&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;A way to translate models (and whole applications) without modifying its code would be great, in order to translate applications that already exist.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;For the database backend there are also different options, including:&lt;/p&gt; - &lt;li&gt;To create a field on the model for every translation&lt;/li&gt;&lt;li&gt;To create a related model&lt;/li&gt;
 &lt;p&gt;&lt;span&gt;&lt;span&gt;There is just one generic ticket on Django that would be fixed:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; - &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;#6460  About multilingual content on database&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;
 &lt;p&gt;May be it's not possible having a generic solution that fits most of the user-cases, and in that case could be worth making some modifications on Django to make it easier creating external applications that can do this job.&lt;/p&gt; &lt;h2&gt;Fix i18n bugs&lt;/h2&gt; &lt;p&gt;There are many bugs already accepted on Django trac, that would be fixed on this Summer of Code. A better review will be done, but some of them could be:&lt;/p&gt; - &lt;li&gt;#3907: LocaleMiddleware allows languages not supported by Django&lt;/li&gt;&lt;li&gt;#5494: Javascript catalog doesn't check project level locales&lt;/li&gt;&lt;li&gt;#7050: make-messages should ignore applications with custom localization&lt;/li&gt;
 &lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;The estimated time line for this project, detailed in a weekly basis is:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Week  01: Analysis and working environment setup
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Week  02: &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Import CLDR&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Week  03: Import CLDR&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Week  04: &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;I18n of dates and numbers&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Week  05: I18n of dates and numbers&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Week  06: I18n of dates and numbers&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Week  07: &lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Translation of dynamic content&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Week  08: Translation of dynamic content&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Week  09: Translation of dynamic content&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Week  10: Translation of dynamic content&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Week  11: Fix i18n bugs&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Week  12: Fix i18n bugs&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;My dedication to the project will be full time, around 40 hours per week. A total of 480 hours are estimated for the whole project.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;About me&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;My name is Marc Garcia, I'm from Barcelona, Europe, and I'm 29 years old.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;I am studying computer science at Universitat Oberta de Catalunya, an Internet-based university from Barcelona. Currently I'm not working but I have almost 8 years of programming experience (with different technologies, mainly Python, PHP and VB).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;I started using Django in 2006, and at this time I developed and participated on the development of many websites, as well as many reusable applications for Django.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;As examples of reusable Django applications note:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; - &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;django-stdimage:  Saves ImageField files with standard names, allowing to delete them,  and creating automatic thumbnails.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;Transdb:  Allows translating database content&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;django-transmeta:  Also allows translating database content (different approach)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;django-cart:  Simple cart object to easily add/update/remove products to user  session&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;
 &lt;p&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;As examples of websites, note next ones:&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; - &lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;http://elisa.fluendo.com  (main developer)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;http://www.andalucia.org  (developer of some parts, mainly the shop and the registration  system)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;http://www.muchomasqueunregalo.com (developer of the Django part of the web site, including the shopping system and product detail pages).&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;http://www.accopensys.com  (only developer)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;http://www.showroom.es  (only developer)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;http://www.tierratenis.com  (only developer)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;http://www.latelierdelraval.com  (only developer)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;&lt;span&gt;&lt;span&gt;http://www.restaurantalpunt.com  (only developer)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; &lt;/li&gt;
 &lt;p&gt;&lt;span&gt;&lt;span&gt;I'm also one of the two official translators of Django to Castilian Spanish and Catalan. In addition, I was interviewed about localization on Django on &lt;em&gt;This Week in Django&lt;/em&gt; 20 (on 2008-04-27). I maintain a blog with many Django related posts at http://vaig.be.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Django"></category><category term="Django-i18n"></category></entry><entry><title>django-cart released!</title><link href="https://datapythonista.github.io/blog/django-cart-released.html" rel="alternate"></link><published>2009-03-25T18:50:00+00:00</published><updated>2009-03-25T18:50:00+00:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2009-03-25:/blog/django-cart-released.html</id><summary type="html">&lt;p&gt;Until now, if you had to develop an online store in django, you had two options, use &lt;a href="http://www.satchmoproject.com/"&gt;satchmo&lt;/a&gt;, or write your own code. Satchmo is a huge application that tries to provide everything for all the cases, so for a simple shop you've to deal with hundreds of features that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Until now, if you had to develop an online store in django, you had two options, use &lt;a href="http://www.satchmoproject.com/"&gt;satchmo&lt;/a&gt;, or write your own code. Satchmo is a huge application that tries to provide everything for all the cases, so for a simple shop you've to deal with hundreds of features that you're not going to use, and in some case it won't be enough flexible.&lt;/p&gt;
&lt;p&gt;So what I've not any complain for satchmo, the fact is that is not the ideal solution for some cases as some small shops with few options.&lt;/p&gt;
&lt;p&gt;With that said, this post is to announce the release of a new project that could help some people to do simple web shops in a very simple way. This project is &lt;a href="http://code.google.com/p/django-cart/"&gt;django-cart&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While django-cart already existed, it was an unfinished (and unmaintained) project by Eric Woundenberg, to whom I'm very thankful for letting reuse it's project, and avoid confusion.&lt;/p&gt;
&lt;p&gt;So, what's django-cart. Django Cart is basically a django application that provides a Cart class, with add/remove/update and get methods to be used for storing products. The products model isn't included in the application, so you can define your products with the fields you need. Then you just need something like...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;product_to_add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyProductModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;whatever&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product_to_add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product_to_add&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and your product will be saved on the database, on a session based cart. Getting the content of the cart is as easy as itering the cart instance.&lt;/p&gt;
&lt;p&gt;And basically that's it. More information is available on the project page. Just note that the current version of the application is unstable, and hasn't been tested enough, so feel free to use it, but consider that you'll have to test it by yourself and report/fix some bugs.&lt;/p&gt;
&lt;p&gt;I hope all you like it!&lt;/p&gt;</content><category term="misc"></category><category term="Django"></category></entry><entry><title>Getting client OS in Django</title><link href="https://datapythonista.github.io/blog/getting-client-os-in-django.html" rel="alternate"></link><published>2009-03-11T13:30:00+00:00</published><updated>2009-03-11T13:30:00+00:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2009-03-11:/blog/getting-client-os-in-django.html</id><summary type="html">&lt;p&gt;Some times it can be useful to serve our site content with little differences depending on the visitor operating system. I really think it's a bad idea changing the content or doing some big changes, depending on it, but this post can be useful for it as well.&lt;/p&gt;
&lt;p&gt;So, while …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some times it can be useful to serve our site content with little differences depending on the visitor operating system. I really think it's a bad idea changing the content or doing some big changes, depending on it, but this post can be useful for it as well.&lt;/p&gt;
&lt;p&gt;So, while most time just some Javascript is used to customize user experience based on its operating system, few times it'll also be useful to do it in the server side.&lt;/p&gt;
&lt;p&gt;For those cases, here you've a simple context processor that will make available a template variable named "platform" which content can be "Linux", "Mac" or "Windows".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user_agent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39; &lt;/span&gt;
&lt;span class="sd"&gt;    Context processor for Django that provides operating system&lt;/span&gt;
&lt;span class="sd"&gt;    information base on HTTP user agent.&lt;/span&gt;
&lt;span class="sd"&gt;    A user agent looks like (line break added):&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.6) \&lt;/span&gt;
&lt;span class="sd"&gt;    Gecko/2009020409 Iceweasel/3.0.6 (Debian-3.0.6-1)&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user_agent&amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# Mozilla/5.0&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(?P&amp;lt;application_name&amp;gt;\w+)/(?P&amp;lt;application_version&amp;gt;[\d\.]+)&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; \(&amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# X11&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(?P&amp;lt;compatibility_flag&amp;gt;\w+)&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;; &amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# U &lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(?P&amp;lt;version_token&amp;gt;[\w .]+)&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;; &amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# Linux i686&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(?P&amp;lt;platform_token&amp;gt;[\w .]+)&amp;#39;&lt;/span&gt;
    &lt;span class="c1"&gt;# anything else&lt;/span&gt;
    &lt;span class="n"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;; .*&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;user_agent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;META&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HTTP_USER_AGENT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_agent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupdict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;full_platform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform_token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;platform_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;full_platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;platform_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Windows&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Linux&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mac&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;platform_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;platform_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mac&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
            &lt;span class="c1"&gt;# Mac is given as &amp;quot;PPC Mac&amp;quot; or &amp;quot;Intel Mac&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;platform_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;full_platform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="n"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;user-agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user_agent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;full_platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;full_platform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make it work just copy the code in a file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;myproject&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myapp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;context_processors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;add it to context processors in settings&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myproject.myapp.context_processors.user_agent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and don't forget to add the RequestContext parameter if you are processing your template with render_to_response and want the variable available &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.template&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RequestContext&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mytemplate.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mycontext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;font-weight:bold;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;RequestContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you'll be able to do something like that in your templates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;You are a &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;platform&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; user.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category><category term="Django"></category></entry><entry><title>django-multilingual syntax poll</title><link href="https://datapythonista.github.io/blog/django-multilingual-syntax-poll.html" rel="alternate"></link><published>2009-03-10T00:00:00+00:00</published><updated>2009-03-10T00:00:00+00:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2009-03-10:/blog/django-multilingual-syntax-poll.html</id><summary type="html">&lt;p&gt;Those days there is some activity in the django model translation area, specially for the two new projects that joined &lt;a href="http://code.google.com/p/django-multilingual/"&gt;django-multilingual&lt;/a&gt; and &lt;a href="http://code.google.com/p/transdb/"&gt;transdb&lt;/a&gt; to achieve this: &lt;a href="http://code.google.com/p/django-transmeta"&gt;django-transmeta&lt;/a&gt; and &lt;a href="http://code.google.com/p/django-modeltranslation/"&gt;django-modeltranslation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While there are some intentional differences among some projects (for example django-modeltranslation is the only one that can translate models without …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Those days there is some activity in the django model translation area, specially for the two new projects that joined &lt;a href="http://code.google.com/p/django-multilingual/"&gt;django-multilingual&lt;/a&gt; and &lt;a href="http://code.google.com/p/transdb/"&gt;transdb&lt;/a&gt; to achieve this: &lt;a href="http://code.google.com/p/django-transmeta"&gt;django-transmeta&lt;/a&gt; and &lt;a href="http://code.google.com/p/django-modeltranslation/"&gt;django-modeltranslation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While there are some intentional differences among some projects (for example django-modeltranslation is the only one that can translate models without editing them), it would be great to merge all (or most) existing projects, and join the efforts to get our best application (and hopefully it'll worth to be included in Django itself).&lt;/p&gt;
&lt;p&gt;So, with the merge of those applications in mind, we're &lt;a href="http://groups.google.com/group/django-multilingual/browse_thread/thread/2fab1d1674090079"&gt;planning&lt;/a&gt; to create a branch on django-multilingual that will have the very best of each existing application, and any other cool idea.&lt;/p&gt;
&lt;p&gt;So if you have good Python/Django skills, and want to add some open source work in your CV... ;)  join us now!&lt;/p&gt;
&lt;p&gt;Or if you are a potential user of this application, or you just think that your opinion is worth to be shared, please fill the &lt;a href="http://doodle.com/aicvayf8ss2mxm2h"&gt;&lt;span style="font-weight:bold;"&gt;MODEL SYNTAX POLL&lt;/span&gt;&lt;/a&gt;, or mail &lt;a href="http://groups.google.com/group/django-multilingual/browse_thread/thread/2fab1d1674090079"&gt;us&lt;/a&gt; with your ideas.&lt;/p&gt;
&lt;p&gt;Here there are simple sample for each option on the poll:&lt;/p&gt;
&lt;p&gt;class Translation&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;(&lt;span class="n"&gt;model&lt;/span&gt;.&lt;span class="n"&gt;Model&lt;/span&gt;):
    &lt;span class="n"&gt;my_field&lt;/span&gt; = &lt;span class="n"&gt;CharField&lt;/span&gt;()

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Translation&lt;/span&gt;(&lt;span class="n"&gt;multilingual&lt;/span&gt;.&lt;span class="n"&gt;Translation&lt;/span&gt;):
        &lt;span class="n"&gt;my_i18n_field&lt;/span&gt; = &lt;span class="n"&gt;CharField&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;custom fields&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;(&lt;span class="n"&gt;model&lt;/span&gt;.&lt;span class="n"&gt;Model&lt;/span&gt;):
    &lt;span class="n"&gt;my_field&lt;/span&gt; = &lt;span class="n"&gt;CharField&lt;/span&gt;()
    &lt;span class="n"&gt;my_i18n_field&lt;/span&gt; = &lt;span class="n"&gt;TransCharField&lt;/span&gt;()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;separate model&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;(&lt;span class="n"&gt;model&lt;/span&gt;.&lt;span class="n"&gt;Model&lt;/span&gt;):
    &lt;span class="n"&gt;my_field&lt;/span&gt; = &lt;span class="n"&gt;CharField&lt;/span&gt;()
    &lt;span class="n"&gt;my_i18n_field&lt;/span&gt; = &lt;span class="n"&gt;CharField&lt;/span&gt;()

&lt;span class="nb"&gt;Class&lt;/span&gt; &lt;span class="n"&gt;MyModelTranslation&lt;/span&gt;(&lt;span class="n"&gt;TranslationOptions&lt;/span&gt;):
    &lt;span class="n"&gt;fields&lt;/span&gt; = (&lt;span class="s"&gt;&amp;#39;my_i18n_field&amp;#39;&lt;/span&gt;,)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;translate attrs in Meta&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;(&lt;span class="n"&gt;model&lt;/span&gt;.&lt;span class="n"&gt;Model&lt;/span&gt;):
    &lt;span class="n"&gt;my_field&lt;/span&gt; = &lt;span class="n"&gt;CharField&lt;/span&gt;()
    &lt;span class="n"&gt;my_i18n_field&lt;/span&gt; = &lt;span class="n"&gt;CharField&lt;/span&gt;()

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Meta:&lt;/span&gt;
        &lt;span class="n"&gt;translate&lt;/span&gt; = (&lt;span class="s"&gt;&amp;#39;my_i18n_field&amp;#39;&lt;/span&gt;,)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;translate=True in field options&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;MyModel&lt;/span&gt;(&lt;span class="n"&gt;model&lt;/span&gt;.&lt;span class="n"&gt;Model&lt;/span&gt;):
    &lt;span class="n"&gt;my_field&lt;/span&gt; = &lt;span class="n"&gt;CharField&lt;/span&gt;()
    &lt;span class="n"&gt;my_i18n_field&lt;/span&gt; = &lt;span class="n"&gt;CharField&lt;/span&gt;(&lt;span class="n"&gt;translate&lt;/span&gt;=&lt;span class="nb"&gt;True&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Do you have a better idea?
Just leave a comment here,
or write a mail on this &lt;a href="http://groups.google.com/group/django-multilingual/browse_thread/thread/2fab1d1674090079"&gt;thread&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Django"></category></entry><entry><title>Numeric IP field for Django</title><link href="https://datapythonista.github.io/blog/numeric-ip-field-for-django.html" rel="alternate"></link><published>2009-03-06T13:05:00+00:00</published><updated>2009-03-06T13:05:00+00:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2009-03-06:/blog/numeric-ip-field-for-django.html</id><summary type="html">&lt;p&gt;Some time ago I needed to add an IP field to my model with more records (some hundred thousands). I was going to just add Django's IPAddressField, but I realized that it stores the data as text on the database, and I didn't like the idea.&lt;/p&gt;
&lt;p&gt;Basically, and IP address …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some time ago I needed to add an IP field to my model with more records (some hundred thousands). I was going to just add Django's IPAddressField, but I realized that it stores the data as text on the database, and I didn't like the idea.&lt;/p&gt;
&lt;p&gt;Basically, and IP address is just 4 bytes of data, but it's text representation can use between 7 and 15 bytes. That's not a big different when your model will have few rows, but it's a different when you'll have a huge set of IP addresses, and specially if you want to join tables by it.&lt;/p&gt;
&lt;p&gt;The only inconvenient of storing the IPs as numbers is that are not human readable if you want to check them directly to database.&lt;/p&gt;
&lt;p&gt;So, here you have my code that can be used as a replacement of IPAddressField:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;IPy&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.translation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ugettext&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_ip_to_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;IPy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_int_to_ip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numeric_ip&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;IPy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numeric_ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strNormal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IPFormField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;_ip_to_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
                &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You must provide a valid IP address&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPFormField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IPField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PositiveIntegerField&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39; &lt;/span&gt;
&lt;span class="sd"&gt;    IP field for django for storing IPs as integers on database&lt;/span&gt;
&lt;span class="sd"&gt;    (Django&amp;#39;s field IPAddressField stores them as text)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="vm"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubfieldBase&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_python&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;long&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_int_to_ip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_db_prep_save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_ip_to_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_db_prep_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_ip_to_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_db_prep_lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lookup_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_db_prep_lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;lookup_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;_ip_to_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;formfield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;defaults&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;form_class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IPFormField&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IPField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formfield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span style="font-weight:bold;"&gt;NOTE&lt;/span&gt;: This code requires &lt;a href="http://c0re.23.nu/c0de/IPy/"&gt;IPy&lt;/a&gt;, a single file python library to work with IP addresses.&lt;/p&gt;</content><category term="misc"></category><category term="Django"></category></entry><entry><title>Easier field translation with django-transmeta</title><link href="https://datapythonista.github.io/blog/easier-field-translation-with-django.html" rel="alternate"></link><published>2009-03-04T11:44:00+00:00</published><updated>2009-03-04T11:44:00+00:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2009-03-04:/blog/easier-field-translation-with-django.html</id><summary type="html">&lt;p&gt;&lt;a href="http://code.google.com/p/django-transmeta"&gt;django-transmeta&lt;/a&gt; is a new project that provides django field translations in a simpler way than existing ones like &lt;a href="http://code.google.com/p/django-multilingual/"&gt;django-multilingual&lt;/a&gt; and &lt;a href="http://code.google.com/p/transdb/"&gt;transdb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basis of that simplicity is creating a field in the database table for every translation, so internally we'll have something like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
CREATE TABLE app_model (
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[...]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;myfield_en varchar,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;myfield_ca varchar …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://code.google.com/p/django-transmeta"&gt;django-transmeta&lt;/a&gt; is a new project that provides django field translations in a simpler way than existing ones like &lt;a href="http://code.google.com/p/django-multilingual/"&gt;django-multilingual&lt;/a&gt; and &lt;a href="http://code.google.com/p/transdb/"&gt;transdb&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basis of that simplicity is creating a field in the database table for every translation, so internally we'll have something like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
CREATE TABLE app_model (
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[...]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;myfield_en varchar,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;myfield_ca varchar,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[...]
);
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where "en" and "ca" are the languages in our application (English and Catalan in this case).&lt;/p&gt;
&lt;p&gt;For the developer, translating a model is as simple as adding a metaclass to the model, and specify the fields to translate in its Meta class:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
from transmeta import TransMeta&lt;/p&gt;
&lt;p&gt;class MyModel(models.Model):
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;__metaclass__&lt;/code&gt; = TransMeta&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name = models.CharField(max_length=64)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;description = models.TextField()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;price = models.FloatField()&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class Meta:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;translate = ('name', 'description', )
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Even with this project is still as tricky as transdb and multilingual, its main goal is being really really simple, for its design, for developers, and its code (that mainly it's about 120 lines of code). It also breaks some limitations of transdb (its most simple predecessor IMHO) like translating non-text fields.&lt;/p&gt;
&lt;p&gt;I also want to mention that I just discovered a new project for translating model fields, named &lt;a href="http://code.google.com/p/django-modeltranslation"&gt;django-modeltranslation&lt;/a&gt;, that looks cool, but I don't like the (admin like) registering way to set translatable fields (too much complicated).&lt;/p&gt;</content><category term="misc"></category><category term="Django"></category></entry><entry><title>Parsing unescaped urls in django</title><link href="https://datapythonista.github.io/blog/parsing-unescaped-urls-in-django.html" rel="alternate"></link><published>2009-02-19T15:40:00+00:00</published><updated>2009-02-19T15:40:00+00:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2009-02-19:/blog/parsing-unescaped-urls-in-django.html</id><summary type="html">&lt;p&gt;Modern browsers escape urls automatically before sending them to the server, but what happens if your application serves http requests to clients that doesn't escape urls?&lt;/p&gt;
&lt;p&gt;The answer is that can get unexpected results if you server works in Django (and probably in any python framework/application). That's because python's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Modern browsers escape urls automatically before sending them to the server, but what happens if your application serves http requests to clients that doesn't escape urls?&lt;/p&gt;
&lt;p&gt;The answer is that can get unexpected results if you server works in Django (and probably in any python framework/application). That's because python's BaseHTTPServer.BaseHTTPRequestHandler handles urls according to standards, not from a human point of view.&lt;/p&gt;
&lt;p&gt;Let's see with an example, consider the next request:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://vaig.be/identify_myself?name=Marc Garcia&amp;amp;country=Catalonia&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;if you request it with a browser, it will escape the space in the url, so the server will get:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;http://vaig.be/identify_myself?name=Marc%20Garcia&amp;amp;country=Catalonia&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;but what if the client uses, for example, python's urllib2.urlopen without escaping (using urllib.quote)? Of course it is a mistake, but you, as server side developer can't control your clients.&lt;/p&gt;
&lt;p&gt;In that case the whole request that server receives is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GET http://vaig.be/identify_myself?name=Marc Garcia&amp;amp;country=Catalonia HTTP/1.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and after being processed (splitted) by python's BaseHTTPServer.BaseHTTPRequestHandler, what we'll get from django is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
request.method == 'GET'
request.META['QUERY_STRING'] == 'name=Marc'
request.META['SERVER_PROTOCOL'] == 'Garcia&amp;amp;country=Catalonia HTTP/1.1'
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;so our request.GET dictionary will look like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;request.GET == {'name': 'Marc'}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;what is not the expected value (from a human point of view).&lt;/p&gt;
&lt;p&gt;So, what we can do for avoiding this result is quite easy (and of course tricky), and is getting the GET values not from django request.GET dictionary but from the one returned by this function:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
def _manual_GET(request):
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ' ' in request.META['SERVER_PROTOCOL']:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;query_string = ' '.join(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[request.META['QUERY_STRING']] +
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;request.META['SERVER_PROTOCOL'].split(' ')[:-1]
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;)&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;args = query_string.split('&amp;amp;')
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result = {}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for arg in args:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;key, value = arg.split('=', 1)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;result[key] = value
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return result
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return request.GET
&lt;/code&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Django"></category></entry><entry><title>StdImage updated to trunk</title><link href="https://datapythonista.github.io/blog/stdimage-updated-to-trunk.html" rel="alternate"></link><published>2008-08-13T03:16:00+01:00</published><updated>2008-08-13T03:16:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-08-13:/blog/stdimage-updated-to-trunk.html</id><summary type="html">&lt;p&gt;Everything is changing on Django those days, and many people contacted me because StdImage stopped working with trunk.&lt;br/&gt;&lt;br/&gt;Basically all major changes (except GeoDjango) affected it, such as change from newforms to forms, signal refactoring, and file storage refactoring. Now it's up to date.&lt;br/&gt;&lt;br/&gt;Remind that &lt;a href="http://code.google.com/p/django-stdimage/"&gt;django-stdimage&lt;/a&gt; is a Django …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Everything is changing on Django those days, and many people contacted me because StdImage stopped working with trunk.&lt;br/&gt;&lt;br/&gt;Basically all major changes (except GeoDjango) affected it, such as change from newforms to forms, signal refactoring, and file storage refactoring. Now it's up to date.&lt;br/&gt;&lt;br/&gt;Remind that &lt;a href="http://code.google.com/p/django-stdimage/"&gt;django-stdimage&lt;/a&gt; is a Django application that provides a standardized  image field(standard name including row id, standard size, and ability to create automatic thumbnails, also standarized of course).&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Translating Django apps. Good practices</title><link href="https://datapythonista.github.io/blog/translating-django-apps-good-practices.html" rel="alternate"></link><published>2008-08-01T18:59:00+01:00</published><updated>2008-08-01T18:59:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-08-01:/blog/translating-django-apps-good-practices.html</id><summary type="html">&lt;p&gt;In this article you'll find some tips, that could be useful for avoiding problems or extra work when translating your Django application.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;1. Setting up the environment&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;Doing some trivial changes to your project structure, can avoid you of translating many string (the ones that are already translated in Django …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this article you'll find some tips, that could be useful for avoiding problems or extra work when translating your Django application.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;1. Setting up the environment&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;Doing some trivial changes to your project structure, can avoid you of translating many string (the ones that are already translated in Django, or in any external application).&lt;br/&gt;&lt;br/&gt;For achieving it, my tip is to copy Django itself, and all external applications to your project path, not in a PYTHONPATH directory. It can also avoid compatibility problems, and version conflicts if you're working on several  projects. Then your project root will contain something like:&lt;br/&gt;&lt;br/&gt;&lt;code&gt;&lt;code&gt;__init__&lt;/code&gt;.py&lt;br/&gt;settings.py&lt;br/&gt;urls.py&lt;br/&gt;django/&lt;br/&gt;transdb/&lt;br/&gt;myapp/&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;Next step is  patching Django (while it's not included in trunk) to omit the inclusion of already translated applications into your project. Here is the &lt;a href="http://code.djangoproject.com/attachment/ticket/7916/7916_v2.diff"&gt;patch&lt;/a&gt;, and you can also see &lt;a href="http://code.djangoproject.com/ticket/7050"&gt;#7050&lt;/a&gt; for further information, or know the status.&lt;br/&gt;&lt;br/&gt;Then, when executing &lt;em&gt;./manage.py makemessages&lt;/em&gt; you'll find in your project catalogs, just strings that aren't previously translated.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;2. Creating string&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;If you don't have a correct literal creation policy, then your translator will have extra work, problems, and your translation won't be as correct as it should.&lt;br/&gt;&lt;br/&gt;The first thing to do is write literals thinking in reusability (as  software reusability but for translations). I'll show it with some examples:&lt;br/&gt;&lt;br/&gt;Using&lt;br/&gt;&lt;br/&gt;&lt;code&gt;{% trans 'product' %}&lt;br/&gt;{% trans 'Product' %}&lt;br/&gt;{% trans 'product:' %}&lt;br/&gt;&lt;/code&gt;&lt;br/&gt;you'll create 3 different string in your translation. Using&lt;br/&gt;&lt;br/&gt;&lt;code&gt;{% trans 'product' %}&lt;br/&gt;{{ &lt;em&gt;("product")|capfirst }}&lt;br/&gt;{% trans 'product' %}:&lt;br/&gt;&lt;/code&gt;&lt;br/&gt;will create just one.&lt;br/&gt;&lt;br/&gt;Another thing to consider is that some times  you consider that a word has just one meaning, or at least you don't think that could be translated using different words. But actually, when translating it to another language it can be converted to different words depending on the context. Let's use an example.&lt;br/&gt;&lt;code&gt;&lt;br/&gt;&lt;em&gt;Play&lt;/em&gt; football&lt;br/&gt;&lt;em&gt;Play&lt;/em&gt; the guitar&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;Probably for most native English  speakers &lt;em&gt;play&lt;/em&gt; doesn't have more than a subtle difference in two sentences, but if I translate it as follows:&lt;br/&gt;&lt;code&gt;&lt;br/&gt;&lt;/em&gt;("play") -&amp;gt; jugar&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;Then you'll find something like&lt;br/&gt;&lt;br/&gt;&lt;code&gt;Play football -&amp;gt; Jugar a  futbol (what's correct)&lt;br/&gt;Play the guitar -&amp;gt; Jugar con la guitarra (what means "To have fun with the guitar", probably without generating any sound)&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;This will be avoided most times, because usually we don't translate word my word, but there are few cases where we do that, and you should consider doing something like that in that case (actually I never had to do it :)&lt;br/&gt;&lt;br/&gt;&lt;code&gt;&lt;em&gt;("play &lt;!-- an instrument --&gt;")&lt;br/&gt;&lt;/em&gt;("play &lt;!-- a sport --&gt;")&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;Then when you translate into Spanish:&lt;br/&gt;&lt;br/&gt;&lt;code&gt;"play &lt;!-- an instrument --&gt;" -&amp;gt; "tocar"&lt;br/&gt;"play &lt;!-- a sport --&gt;" -&amp;gt; "jugar"&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;And I would also translate English into English:&lt;br/&gt;&lt;br/&gt;&lt;code&gt;"play &lt;!-- an instrument --&gt;" -&amp;gt; "play"&lt;br/&gt;"play &lt;!-- a sport --&gt;" -&amp;gt; "play"&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;There will be infinite cases that will generate issues when translating, and it'll be impossible to control everyone. I just wanted to give some tips focused to Django applications.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;3. Translating&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;This article isn't intended to explain how to translate (I think that there is a degree at university for it ;) . But may be you should give some tips/explanations to your translators for better results.&lt;br/&gt;&lt;br/&gt;The first thing you should explain them is how to work with some special cases in your strings. Here you have the two mos common examples that they will found:&lt;br/&gt;&lt;code&gt;&lt;br/&gt;"This is normal text, &lt;big&gt;and this one is bigger&lt;/big&gt;"&lt;br/&gt;"Hello %(name)s"&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;Unless you explain them what it means, probably you'll find something like that in you translated string (using Spanish in the example):&lt;br/&gt;&lt;br/&gt;&lt;code&gt;"Este texto es normal, &lt;grande&gt;y  éste es mayor&lt;/grande&gt;"&lt;br/&gt;"Hola %(nombre)s"&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;Of course those translations doesn't generate the expected results, because the correct ones are:&lt;br/&gt;&lt;br/&gt;&lt;code&gt;"Este texto es normal, &lt;big&gt;y  éste es mayor&lt;/big&gt;"&lt;br/&gt;"Hola %(name)s"&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;Another thing that could be clarified, specially if your translator is involved in the Web site that is being translated (or at least knows the context where every string is used), is not to create translations more specific than the original texts.&lt;br/&gt;&lt;br/&gt;For example, imagine that you've in your application a form for personal data, and one of the fields is called "name". Then you translate your application to Catalan, and your translator knows when translating "name", that is used as person name, and translate it as "nom propi" (first name). It will look nicer by now, while being incorrect for me, so later may be you'll add a form where you ask corporate information and you have a field "name" for the company name. You won't send the string "name" to the translator again, and your translation will be incorrect, so "nom propi" (first name) is not valid for the company name.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;4. Choosing the main language&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;Sometimes it isn't so obvious  the language your application is written in (I mean the language you use inside gettext strings, or trans/blocktrans tags).&lt;br/&gt;&lt;br/&gt;If you're writing an application that will be used widely in the world, and it will be translated to many languages, probably you think that English should be the right language for it, but in some cases there are some questions to take care on.&lt;br/&gt;- &lt;br/&gt; &lt;li&gt;Will your company have an international team (specially of Django developers)? If you have workers from many countries, probably English will be good for letting all of them write/read from the code.&lt;/li&gt;&lt;br/&gt;   &lt;li&gt;Will your translation team/company use English as it source language? The .po files will show your main language as source for translating string. If you hire a German to French translator, isn't a good idea writing your strings in English, so your/their work will increase a lot, and the reliability of the process will decrease.&lt;/li&gt;&lt;br/&gt;    &lt;li&gt; Are your coders fluent in English? It's more complicated (more work) to change a string from a the main language than from a translation. So if your developers can't write correct English, writing literals in their mother tongue language will save time and work.&lt;/li&gt;&lt;br/&gt;
&lt;br/&gt;Unluckily some times you'll have conflicts in previous questions, and you'll have to choose the lesser evil.&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>DjangoCon is still alive?</title><link href="https://datapythonista.github.io/blog/djangocon-is-still-alive.html" rel="alternate"></link><published>2008-07-29T19:15:00+01:00</published><updated>2008-07-29T19:15:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-07-29:/blog/djangocon-is-still-alive.html</id><summary type="html">&lt;p&gt;On July 13th, DjangoCon 2008 was announced, and the illusion and nervousness started for many djangonauts. The main problem here, is that due to the lack of time and experience, the number of attendees is limited to 200. That makes sense, but there are other things that doesn't make sense …&lt;/p&gt;</summary><content type="html">&lt;p&gt;On July 13th, DjangoCon 2008 was announced, and the illusion and nervousness started for many djangonauts. The main problem here, is that due to the lack of time and experience, the number of attendees is limited to 200. That makes sense, but there are other things that doesn't make sense to me. This post is about that, and it's intended to be a kind of constructive criticism.&lt;br/&gt;&lt;br/&gt;The fact is that many people is waiting to know if he/she can get a ticket to  start planning the trip to SF, ans specially to purchase flight tickets. In those two weeks since DjangoCon announcement, flight prices from Barcelona to SF have increased in a 30%. I don't think it's the only case.&lt;br/&gt;&lt;br/&gt;My question is...  It is so difficult to develop and run an application to register users, letting many djangonauts to save some money that could be given to the DSF? :) Are you coding it in PHP? ;)&lt;br/&gt;&lt;br/&gt;Seriously, if you need help, just ask for it, we are a community. But please, stop delaying ticket releasing, we have to get our tickets, make our plans, and we don't want to waste our money getting last time flight tickets. IMHO ticket realising should be priority #1.&lt;br/&gt;&lt;br/&gt;Finally I want to comment something else here in my blog, that previously submitted to DjangoCon organization. Program isn't closed, and probably this is planned and will be added later, but don't you think that BoF sessions are a must in the DjangoCon? I think that we should take profit of being all togheter, to discuss freely any subject about Django, or any related topic.&lt;/p&gt;</content><category term="misc"></category><category term="Django"></category></entry><entry><title>Django i18n status</title><link href="https://datapythonista.github.io/blog/django-i18n-status.html" rel="alternate"></link><published>2008-07-26T04:11:00+01:00</published><updated>2008-07-26T04:11:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-07-26:/blog/django-i18n-status.html</id><summary type="html">&lt;p&gt;Here you have what, from my point of view, is the status of django i18n. Comments will be very welcome, specially from people from countries with other i18n needs than mine (based on the idea that Django i18n is perfect for people in the US, here is the troubleshooting for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here you have what, from my point of view, is the status of django i18n. Comments will be very welcome, specially from people from countries with other i18n needs than mine (based on the idea that Django i18n is perfect for people in the US, here is the troubleshooting for my country, for sure more problems exists for people in for example China).&lt;/p&gt;

&lt;p&gt;This list is part of the analysis that I'm doing to fix all those problems. If you want to participate in making Django also "The web framework for perfectionists outside the US", please contact me.&lt;/p&gt;

&lt;table border="0"&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Subject&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;
&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Comments&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Translation (static content)&lt;/td&gt;
&lt;td style="background-color: rgb(127, 255, 0);"&gt;Yes&lt;/td&gt;
&lt;td&gt;Django has an amazing translation system, easy to use, and exceptionally automated. Also it has bidi support. Despite of this, some problems can be found when translating django or applications to other languages (masculine/femenine...).&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Translation (database content)&lt;/td&gt;
&lt;td style="background-color: rgb(220, 20, 60);"&gt;No&lt;/td&gt;
&lt;td&gt;Django doesn't support model field translation, but it can be achieved using an external application such as [TransDb](http://code.google.com/p/transdb/), [django-multilingual](http://code.google.com/p/django-multilingual/), [django-utils](http://code.google.com/p/django-utils) translation service and [i18ndynamic](http://code.google.com/p/i18ndynamic/). As far as I know only TransDb and django-multilingual are working on Django's trunk.&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Calendar customization&lt;/td&gt;
&lt;td style="background-color: rgb(220, 20, 60);"&gt;No&lt;/td&gt;
&lt;td&gt;Patching Django is required to change first day of week in admin calendar (first day of week is Monday according to ISO and in many countries (most Europe, most South America, and some parts of Asia). See ticket [#1061](http://code.djangoproject.com/ticket/1061)&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Date format (when displaying)&lt;/td&gt;
&lt;td style="background-color: rgb(127, 255, 0);"&gt;Yes&lt;/td&gt;
&lt;td&gt;Dates displayed in admin are formatted according to current locale. Also custom dates can be easily formatted using date filter (f.e. {{ my_date|date:_("DATE_FORMAT") }} ).

The problem here, is that few internationalized formats are defined inside django, so using django formats you can internationalize a date with format "December 31th, 2000", but not with format "12/31/2000". It can be achieved creating date formats in your catalog.&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Date format (on inputs)&lt;/td&gt;
&lt;td style="background-color: rgb(220, 20, 60);"&gt;No&lt;/td&gt;
&lt;td&gt;Django allows specifying one or many input formats for a date form field (using the input_formats parameter of the form field).I think that there is no way to specify the format on the admin fields, specially because the format that generates the calendar is always the same.

Anyway what it's expected is not to specify the format of a field, actually it is to get the format from the current locale.&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Number format (when displaying)&lt;/td&gt;
&lt;td style="background-color: rgb(220, 20, 60);"&gt;No&lt;/td&gt;
&lt;td&gt;Django has just a filter (floatformat) to format numbers, where you can specify how many decimals you want. It's very difficult to customize your number format, to the format of the current locale, and even to a fixed format.&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Number format (on input)&lt;/td&gt;
&lt;td style="background-color: rgb(220, 20, 60);"&gt;No&lt;/td&gt;
&lt;td&gt;Django has no way to specify if you want to enter a decimal number with comma separator (dot is always used). Of course it can't be done according to current locale.&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>TransDb working on trunk!</title><link href="https://datapythonista.github.io/blog/transdb-working-on-trunk.html" rel="alternate"></link><published>2008-05-19T17:31:00+01:00</published><updated>2008-05-19T17:31:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-05-19:/blog/transdb-working-on-trunk.html</id><summary type="html">&lt;p&gt;Some days ago, after the merge of qs-rf to trunk, model field i18n was in trouble, so the principal package for this approach (django-multilingual) stopped working for the latest version of trunk.&lt;br/&gt;&lt;br/&gt;This weekend we had a TransDb sprint, to try to improve our project, and contribute to fix this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some days ago, after the merge of qs-rf to trunk, model field i18n was in trouble, so the principal package for this approach (django-multilingual) stopped working for the latest version of trunk.&lt;br/&gt;&lt;br/&gt;This weekend we had a TransDb sprint, to try to improve our project, and contribute to fix this situation in any way.&lt;br/&gt;&lt;br/&gt;The result: We fixed many issues on TransDb, now the project has a more conventional structure, and a setup script, and... &lt;strong&gt;TransDb is now working on trunk!&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;For achieving  it we created a new branch called oldforms.&lt;br/&gt;&lt;br/&gt;&lt;a href="http://code.google.com/p/transdb"&gt;Try it now&lt;/a&gt;!&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>StdImageField: Improved image field for Django</title><link href="https://datapythonista.github.io/blog/stdimagefield-improved-image-field-for.html" rel="alternate"></link><published>2008-05-17T03:23:00+01:00</published><updated>2008-05-17T03:23:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-05-17:/blog/stdimagefield-improved-image-field-for.html</id><summary type="html">&lt;p&gt;I'm pleased to announce a new project, &lt;a href="http://code.google.com/p/django-stdimage/"&gt;django-stdimage&lt;/a&gt;, that provides a new image field with many improvements respect to Django's core ImageField.&lt;br/&gt;&lt;br/&gt;Features of StdImageField:&lt;br/&gt;- &lt;br/&gt;    &lt;li&gt;Saved files have standardized names (using field name and object id)&lt;/li&gt;&lt;br/&gt;  &lt;li&gt;Images can be removed&lt;/li&gt;&lt;br/&gt; &lt;li&gt;Automatically creates a thumbnail&lt;/li&gt;&lt;br/&gt; &lt;li&gt;Automatically resizes both image and thumbnail …&lt;/li&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm pleased to announce a new project, &lt;a href="http://code.google.com/p/django-stdimage/"&gt;django-stdimage&lt;/a&gt;, that provides a new image field with many improvements respect to Django's core ImageField.&lt;br/&gt;&lt;br/&gt;Features of StdImageField:&lt;br/&gt;- &lt;br/&gt;    &lt;li&gt;Saved files have standardized names (using field name and object id)&lt;/li&gt;&lt;br/&gt;  &lt;li&gt;Images can be removed&lt;/li&gt;&lt;br/&gt; &lt;li&gt;Automatically creates a thumbnail&lt;/li&gt;&lt;br/&gt; &lt;li&gt;Automatically resizes both image and thumbnail (with optional crop to fit exactly specified size)&lt;/li&gt;&lt;br/&gt;
&lt;br/&gt;Here you've an example of usage:&lt;br/&gt;&lt;br/&gt;&lt;code&gt;&lt;br/&gt;from django.db import models&lt;br/&gt;from stdimage import StdImageField&lt;/code&gt;&lt;br/&gt;&lt;code&gt;&lt;br/&gt;class MyClass(models.Model):&lt;br/&gt;&amp;nbsp;&amp;nbsp;my_image = StdImageField(upload_to='path/to/img', blank=True, \&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;size=(640, 480), thumbnail_size=(100, 100, True))&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;If a file called "uploaded_file.png" is uploaded for object id 34, then result will be:&lt;br/&gt;- &lt;br/&gt;  &lt;li&gt; /path/to/img/my_image_34.png (with bigger possible size to fit in a 640x480 area)&lt;/li&gt;&lt;br/&gt;    &lt;li&gt;/path/to/img/my_image_34.thumbnail.png (with a exact size of 100x100, cropping if necessary)&lt;/li&gt;&lt;br/&gt;
&lt;br/&gt;Also it will appear a check-box for deleting when using admin.&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Searching on Django Snippets</title><link href="https://datapythonista.github.io/blog/searching-on-django-snippets.html" rel="alternate"></link><published>2008-05-11T02:24:00+01:00</published><updated>2008-05-11T02:24:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-05-11:/blog/searching-on-django-snippets.html</id><summary type="html">&lt;p&gt;One of the key websites about Django is &lt;a href="http://www.djangosnippets.org"&gt;Django Snippets&lt;/a&gt;, by one of the key Django developers, &lt;a href="http://www.b-list.org/"&gt;James Bennett&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;I've followed many of the James work, and it's awesome; but I've a complaint on Django Snippets. It's the inefficient way to find anything there. The only ways that I've found …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the key websites about Django is &lt;a href="http://www.djangosnippets.org"&gt;Django Snippets&lt;/a&gt;, by one of the key Django developers, &lt;a href="http://www.b-list.org/"&gt;James Bennett&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;I've followed many of the James work, and it's awesome; but I've a complaint on Django Snippets. It's the inefficient way to find anything there. The only ways that I've found is searching using a paginated list by author, language or tag (sorted alphabetically), where you can spend a huge amount of time if the tag you search starts by Z.&lt;br/&gt;&lt;br/&gt;Of course that I can go to Google an search using site:www.djangosnippets.org, and it would work for all indexed snippets, but I think that at least this search box should be added on the site (until anybody writes the &lt;a href="http://www.djangosnippets.org/about/faq/"&gt;generic search engine&lt;/a&gt; for Django).  It would also help adding result page numbers (with links) at the end of the paginated list.&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Changing language on the admin</title><link href="https://datapythonista.github.io/blog/changing-language-on-admin.html" rel="alternate"></link><published>2008-05-11T02:08:00+01:00</published><updated>2008-05-11T02:08:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-05-11:/blog/changing-language-on-admin.html</id><summary type="html">&lt;p&gt;When working on multilanguage sites, a feature that many times I missed is a direct way to change the language when you're on the admin,&lt;br/&gt;&lt;br/&gt;With standard Django the only way that exists (as far as I know), is leaving the admin, going to the website, change the language there …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When working on multilanguage sites, a feature that many times I missed is a direct way to change the language when you're on the admin,&lt;br/&gt;&lt;br/&gt;With standard Django the only way that exists (as far as I know), is leaving the admin, going to the website, change the language there, and come back to the admin. Not very fast.&lt;br/&gt;&lt;br/&gt;Today, I've created a &lt;a href="http://www.djangosnippets.org/snippets/751/"&gt;snippet&lt;/a&gt; that creates a drop down menu on the admin bar (just in the main page) to change the language.&lt;br/&gt;&lt;br/&gt;Hope it helps.&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>DSNP 0.9 released</title><link href="https://datapythonista.github.io/blog/dsnp-09-released.html" rel="alternate"></link><published>2008-05-10T04:39:00+01:00</published><updated>2008-05-10T04:39:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-05-10:/blog/dsnp-09-released.html</id><summary type="html">&lt;p&gt;I know that it was just few days ago that I released another version of DSNP, but because of it, I got a lot of feedback on it, I worked hard, and finally DSNP is stable.&lt;br/&gt;&lt;br/&gt;For now, it'll be 0.9 because it works on Django newforms-admin branch, so …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I know that it was just few days ago that I released another version of DSNP, but because of it, I got a lot of feedback on it, I worked hard, and finally DSNP is stable.&lt;br/&gt;&lt;br/&gt;For now, it'll be 0.9 because it works on Django newforms-admin branch, so 1.0 will be reached when newforms-admin will be merged into trunk.&lt;br/&gt;&lt;br/&gt;Changeset for this version is next:&lt;br/&gt;- &lt;br/&gt;  &lt;li&gt;Generated sqlite file has write permissions for all users by default&lt;/li&gt;&lt;br/&gt;  &lt;li&gt;Static files are served by Django http server on development environment (DEBUG==True)&lt;/li&gt;&lt;br/&gt;    &lt;li&gt;File admin.py created to specify admin options&lt;/li&gt;&lt;br/&gt;    &lt;li&gt;Media path has changed (now, all static files are under "media" directory) due to an &lt;a href="http://vaig.be/2008/05/09/unable-to-define-my-urls-exactly-my-way-resignation-statement/"&gt;issue&lt;/a&gt;&lt;/li&gt;&lt;br/&gt;
&lt;br/&gt;I hope you like it.&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Unable to define my urls exactly my way (resignation statement)</title><link href="https://datapythonista.github.io/blog/unable-to-define-my-urls-exactly-my-way.html" rel="alternate"></link><published>2008-05-09T19:44:00+01:00</published><updated>2008-05-09T19:44:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-05-09:/blog/unable-to-define-my-urls-exactly-my-way.html</id><summary type="html">&lt;p&gt;I've been working with Django for a while, and it helped me to get all my web developments with nice urls. But I also wanted a nice url structure...&lt;br/&gt;&lt;br/&gt;What it is nice for me, opposite to Django default settings, is avoiding the media prefix on my media urls, so …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been working with Django for a while, and it helped me to get all my web developments with nice urls. But I also wanted a nice url structure...&lt;br/&gt;&lt;br/&gt;What it is nice for me, opposite to Django default settings, is avoiding the media prefix on my media urls, so&lt;br/&gt;&lt;br/&gt;http://localhost/media/admin/css/login.css would be http://localhost/admin/css/login.cssTrying to emulate old website structures (used widely in php sites).&lt;br/&gt;&lt;br/&gt;That could be nice or not, but for sure it is complicated.&lt;br/&gt;&lt;br/&gt;The first step was to setup apache for it, a little bit more complicated than the usual setup, but possible:&lt;br/&gt;&lt;br/&gt;&lt;LocationMatch "/((css|js|img|swf|pdf)/|favicon.ico)"&gt;&lt;br/&gt;SetHandler None&lt;br/&gt;&lt;/LocationMatch&gt;&lt;br/&gt;&lt;br/&gt;The main problem comes when using Django development http server (started by "python manage.py runserver"), and the admin. Of course you can do that, but what is not possible, is to define the same name for your admin media path, and for the admin itself.&lt;br/&gt;&lt;br/&gt;For example:&lt;br/&gt;&lt;br/&gt;http://localhost/admin and http://localhost/admin/css/login.css&lt;br/&gt;&lt;br/&gt;The reason is the Django web server, processes all requests starting with the ADMIN_MEDIA_PREFIX setting with the AdminMediaHandler, what implies with that structure that all admin requests (even the ones that aren't static files) are processed by this handler, raising an error when the request isn't for a static file. The error is next.&lt;br/&gt;&lt;br/&gt;Permission denied: ${PYTHON_PATH}/django/contrib/admin/media/&lt;br/&gt;&lt;br/&gt;So this is my resignation statement to do what I wanted to do initially. Now, options are:&lt;br/&gt;- &lt;br/&gt;   &lt;li&gt;Don't use the Django http server (use apache even for development)&lt;/li&gt;&lt;br/&gt;    &lt;li&gt;Keep the same structure but change the admin media directory (for example from "admin" to "admin-media"&lt;/li&gt;&lt;br/&gt;   &lt;li&gt;Use the "media" (or any other name) prefix&lt;/li&gt;&lt;br/&gt;
&lt;br/&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Current version of my project DSNP is affected by this issue. I'll solve it asap.&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>New DSNP version</title><link href="https://datapythonista.github.io/blog/new-dsnp-version.html" rel="alternate"></link><published>2008-05-07T03:46:00+01:00</published><updated>2008-05-07T03:46:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-05-07:/blog/new-dsnp-version.html</id><summary type="html">&lt;p&gt;&lt;a href="http://code.google.com/p/dsnp/"&gt;DSNP&lt;/a&gt; is a simple and customizable Python script, that automatically creates a working Django project.&lt;br/&gt;&lt;br/&gt;Project (and application) creation in Django are very openend and flexible, but sometimes is useful getting all the work done for you, specially:&lt;br/&gt;- &lt;br/&gt;  &lt;li&gt;If you create many Django projects with the same structure.&lt;/li&gt;&lt;br/&gt;   &lt;li&gt;If you're …&lt;/li&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://code.google.com/p/dsnp/"&gt;DSNP&lt;/a&gt; is a simple and customizable Python script, that automatically creates a working Django project.&lt;br/&gt;&lt;br/&gt;Project (and application) creation in Django are very openend and flexible, but sometimes is useful getting all the work done for you, specially:&lt;br/&gt;- &lt;br/&gt;  &lt;li&gt;If you create many Django projects with the same structure.&lt;/li&gt;&lt;br/&gt;   &lt;li&gt;If you're new to Python, and want to see a "hello world!"  application working in less than one minute.&lt;/li&gt;&lt;br/&gt;   &lt;li&gt;If you want to check your Django structure with somebody's else (me).&lt;/li&gt;&lt;br/&gt;
&lt;br/&gt;DSNP does exactly that, automates the process of creating projects and applications in Django. The resulting website is a simple project with a single application, ready for start creating models and templates. It's also customizable, to let everyone set their own preferences in the script, and adapt it to your desired structure.&lt;br/&gt;&lt;br/&gt;Want to try it (in five simple steps)?&lt;br/&gt;&lt;br/&gt;&lt;em&gt;svn checkout http://dsnp.googlecode.com/svn/trunk/&lt;/em&gt;&lt;br/&gt;&lt;em&gt;python dsnp.py myproject&lt;/em&gt;&lt;br/&gt;&lt;em&gt;cd myproject&lt;/em&gt;&lt;br/&gt;&lt;em&gt;python manage.py runserver&lt;/em&gt;&lt;br/&gt;&lt;em&gt;Browse &lt;a href="http://localhost:8000/"&gt;http://localhost:8000/ &lt;/a&gt;&lt;/em&gt;&lt;br/&gt;&lt;br/&gt;Easy right?&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Django L10n</title><link href="https://datapythonista.github.io/blog/django-l10n.html" rel="alternate"></link><published>2008-04-29T02:22:00+01:00</published><updated>2008-04-29T02:22:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-04-29:/blog/django-l10n.html</id><summary type="html">&lt;p&gt;This Sunday, I participated in &lt;a href="http://blog.michaeltrier.com/2008/4/28/this-week-in-django-20-2008-04-27"&gt;This Week in Django&lt;/a&gt;, and tried to give some ideas on Django localization.&lt;br/&gt;&lt;br/&gt;Here I'll post some of the ideas of the interview (and some that I missed), for serving as reference:&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;How to translate your application (quick guide):&lt;/strong&gt;&lt;br/&gt;- &lt;br/&gt;  &lt;li&gt;Mark every text in your application …&lt;/li&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;This Sunday, I participated in &lt;a href="http://blog.michaeltrier.com/2008/4/28/this-week-in-django-20-2008-04-27"&gt;This Week in Django&lt;/a&gt;, and tried to give some ideas on Django localization.&lt;br/&gt;&lt;br/&gt;Here I'll post some of the ideas of the interview (and some that I missed), for serving as reference:&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;How to translate your application (quick guide):&lt;/strong&gt;&lt;br/&gt;- &lt;br/&gt;  &lt;li&gt;Mark every text in your application for translation:&lt;br/&gt;&lt;ul&gt;&lt;br/&gt;  &lt;li&gt;In models.py, views.py... convert  &lt;em&gt;'my text in just one language'&lt;/em&gt; to &lt;em&gt;&lt;em&gt;('my text to translate')&lt;/em&gt;. Don't forget to import &lt;/em&gt;: f&lt;em&gt;rom django.utils.translation import ugettext_lazy as _&lt;/em&gt;&lt;/li&gt;&lt;br/&gt;  &lt;li&gt;In templates, convert &lt;em&gt;&lt;p&gt;Text in english&lt;/p&gt;&lt;/em&gt; to &lt;em&gt;&lt;p&gt;{% trans 'Text in many languages' %}&lt;/p&gt;&lt;/em&gt; (also this can be done with blocktrans tag)&lt;/li&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/li&gt;&lt;br/&gt; &lt;li&gt;Go to your project path and create a directory called locale (also you can do that just for an application)&lt;/li&gt;&lt;br/&gt;   &lt;li&gt;Execute ${PATH_TO_DJANGO}/bin/make-messages -l ${LANGUAGE_CODE} (where language code is en for english, es for spanish...)&lt;/li&gt;&lt;br/&gt;    &lt;li&gt;Edit ${PROJECT_PATH}/locale/${LANGUAGE_CODE}/LC_MESSAGES/django.po and set the &lt;em&gt;msgstr&lt;/em&gt; variables with the translation of every &lt;em&gt;msgid&lt;/em&gt;&lt;/li&gt;&lt;br/&gt; &lt;li&gt;Run msgfmt django.po -o django.mo (I just realized after the interview that exists a django script complie-messages.py that does that for all .po files)&lt;/li&gt;&lt;br/&gt;  &lt;li&gt;And then you have your application translated. There are some settings in settings.py that need to be set for making it work (USE_I18N = True, set LANGUAGES and LANGUAGE_CODE, and specify the django.middleware.locale.LocaleMiddleware middleware)&lt;/li&gt;&lt;br/&gt; &lt;li&gt;Then probably you'll want to have your select input with all available languages (or something like that). For it you'll have to add &lt;em&gt;(r'^i18n/', include('django.conf.urls.i18n'))&lt;/em&gt; to your urls.py, and from your html send a POST request to &lt;em&gt;/i18n/setlang&lt;/em&gt; with the parameter &lt;em&gt;language&lt;/em&gt; set to desired language code&lt;/li&gt;&lt;br/&gt;   &lt;li&gt;For more stuff, and detailed information check: &lt;a href="http://www.djangoproject.com/documentation/i18n/"&gt;http://www.djangoproject.com/documentation/i18n/&lt;/a&gt;&lt;/li&gt;&lt;br/&gt;&lt;/ul&gt;&lt;br/&gt;&lt;strong&gt;Things that IMHO should be improved in Django for a better L10n expirience:&lt;/strong&gt;&lt;br/&gt;- &lt;br/&gt;    &lt;li&gt;Move localflavors outside trunk (to avoid unnecessary translation costs). Every localflavor should come with necessary translations.&lt;/li&gt;&lt;br/&gt;  &lt;li&gt;Create locale settings (besides translations), to set decimal symbol, date and time format, first day of week... and use it automatically for current locale/language.&lt;br/&gt;&lt;ul&gt;&lt;br/&gt;    &lt;li&gt;Check tickets &lt;a href="http://code.djangoproject.com/ticket/1061"&gt;#1061&lt;/a&gt;, &lt;a href="http://code.djangoproject.com/ticket/3940"&gt;#3940&lt;/a&gt; and &lt;a href="http://code.djangoproject.com/ticket/6783"&gt;#6783&lt;/a&gt; that gives different approaches to this problem.&lt;/li&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/li&gt;&lt;br/&gt; &lt;li&gt;Create translatable CharFields and TextFields. For now &lt;a href="http://code.google.com/p/django-multilingual/"&gt;django-multilingual&lt;/a&gt; and &lt;a href="http://code.google.com/p/transdb/"&gt;transdb&lt;/a&gt; can be used for it.&lt;/li&gt;&lt;br/&gt;  &lt;li&gt;Adding something to select the language in admin (when more than one is available).&lt;/li&gt;&lt;br/&gt;   &lt;li&gt;Haven't checked it too much, but it'll be good if urls could be translated as well.&lt;/li&gt;&lt;br/&gt;&lt;/ul&gt;&lt;br/&gt;Finally I want to thank for letting me participate in TWID to &lt;a href="http://blog.michaeltrier.com"&gt;Michael Trier&lt;/a&gt;, who is a father, husband, software architect, entrepreneur, a great journalist, and a better person. And also to &lt;a href="http://www.pointy-stick.com/blog/"&gt;Malcolm Tredinnick&lt;/a&gt;, who recommended me to the show (not sure if I deserved the honour), and for his unpayable help and support on my Django work.&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Django Catalan usergroup meeting</title><link href="https://datapythonista.github.io/blog/django-catalan-usergroup-meeting.html" rel="alternate"></link><published>2008-04-01T04:43:00+01:00</published><updated>2008-04-01T04:43:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-04-01:/blog/django-catalan-usergroup-meeting.html</id><summary type="html">&lt;p&gt;Six months ago, I decided to create the &lt;a href="http://groups.google.com/group/django-cat"&gt;Django Catalan usergroup&lt;/a&gt;, for user in &lt;a href="http://en.wikipedia.org/wiki/Catalonia"&gt;Catalonia&lt;/a&gt;, and for users who speak &lt;a href="http://en.wikipedia.org/wiki/Catalan_language"&gt;catalan&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;Today I'm happy to announce that we are already 26 members, and we are going to have our first meeting on April 3rd. We've decided to meet together with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Six months ago, I decided to create the &lt;a href="http://groups.google.com/group/django-cat"&gt;Django Catalan usergroup&lt;/a&gt;, for user in &lt;a href="http://en.wikipedia.org/wiki/Catalonia"&gt;Catalonia&lt;/a&gt;, and for users who speak &lt;a href="http://en.wikipedia.org/wiki/Catalan_language"&gt;catalan&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;Today I'm happy to announce that we are already 26 members, and we are going to have our first meeting on April 3rd. We've decided to meet together with people from &lt;a href="http://python.meetup.com/185/"&gt;The Barcelona Python Meetup Group&lt;/a&gt;, so both groups have common interests, and many people in common.&lt;br/&gt;&lt;br/&gt;Our planning is having some talks on key subjects such as "Django presentation to non-Django users", "Django status", "Django i18n", "Python 3k"... as well as lightning talks from everybody, to share personal or professional experience with Python/Django. We'll also discuss about organizing a conference in Barcelona, and about the Django-Rails football (aka soccer) match.&lt;br/&gt;&lt;br/&gt;If you are in Barcelona on 3rd, and you want to join us, here you have details (remember that attendance confirmation is required one day before the event):&lt;br/&gt;&lt;br/&gt;&lt;a href="http://python.meetup.com/185/calendar/7640211/"&gt;http://python.meetup.com/185/calendar/7640211/&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;See you there!&lt;/p&gt;</content><category term="misc"></category><category term="Django"></category></entry><entry><title>TransDb: Pretty much easier</title><link href="https://datapythonista.github.io/blog/transdb-pretty-much-easier.html" rel="alternate"></link><published>2008-03-06T19:49:00+00:00</published><updated>2008-03-06T19:49:00+00:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-03-06:/blog/transdb-pretty-much-easier.html</id><summary type="html">&lt;p&gt;Today I've released a new version of TransDb, the Django package that allows storing text at database in more than one language (using the same field).&lt;br/&gt;&lt;br/&gt;New version is pretty much easier to use, after fixing many bugs, and avoiding the use of a filter in templates.&lt;br/&gt;&lt;br/&gt;Now, migrating your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I've released a new version of TransDb, the Django package that allows storing text at database in more than one language (using the same field).&lt;br/&gt;&lt;br/&gt;New version is pretty much easier to use, after fixing many bugs, and avoiding the use of a filter in templates.&lt;br/&gt;&lt;br/&gt;Now, migrating your single-language application to a multi-language one is very easy, so almost the only thing you've to do is changing your model fields (no data transformation is required, it is done automatically when you translate texts at admin). A full migration procedure is available at project page.&lt;br/&gt;&lt;br/&gt;You can find everything at &lt;a href="http://code.google.com/p/transdb"&gt;Google's project page&lt;/a&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Media data without media directory</title><link href="https://datapythonista.github.io/blog/media-data-without-media-directory.html" rel="alternate"></link><published>2008-01-17T16:13:00+00:00</published><updated>2008-01-17T16:13:00+00:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-01-17:/blog/media-data-without-media-directory.html</id><summary type="html">&lt;p&gt;It's not a big trouble, but I wanted to remove the /media/ prefix on all my media links, like...&lt;br/&gt;&lt;br/&gt;&lt;code&gt;&lt;br/&gt;&lt;img alt="My Image" src="/media/img/myimage.png"/&gt;&lt;br/&gt;&lt;link rel="stylesheet" href="/media/css/mysheet.css" type="text/css"/&gt;&lt;br/&gt;&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;and so on.&lt;br/&gt;&lt;br/&gt;This can be easily achieved by replacing in apache's configuration file:&lt;br/&gt;&lt;br/&gt;&lt;code&gt;&lt;br/&gt;&lt;Location "/media/"&gt;&lt;br/&gt;SetHandler None&lt;br/&gt;&lt;/LocationMatch&gt;&lt;br/&gt;&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;by&lt;br/&gt;&lt;br/&gt;&lt;code&gt;&lt;br/&gt;&lt;LocationMatch "/((css|js|img|swf|pdf)/|favicon.ico)"&gt;&lt;br/&gt;SetHandler None&lt;br/&gt;&lt;/LocationMatch&gt;&lt;br/&gt;&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;Of course you have to have all you media files in folders …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's not a big trouble, but I wanted to remove the /media/ prefix on all my media links, like...&lt;br/&gt;&lt;br/&gt;&lt;code&gt;&lt;br/&gt;&lt;img alt="My Image" src="/media/img/myimage.png"/&gt;&lt;br/&gt;&lt;link rel="stylesheet" href="/media/css/mysheet.css" type="text/css"/&gt;&lt;br/&gt;&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;and so on.&lt;br/&gt;&lt;br/&gt;This can be easily achieved by replacing in apache's configuration file:&lt;br/&gt;&lt;br/&gt;&lt;code&gt;&lt;br/&gt;&lt;Location "/media/"&gt;&lt;br/&gt;SetHandler None&lt;br/&gt;&lt;/LocationMatch&gt;&lt;br/&gt;&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;by&lt;br/&gt;&lt;br/&gt;&lt;code&gt;&lt;br/&gt;&lt;LocationMatch "/((css|js|img|swf|pdf)/|favicon.ico)"&gt;&lt;br/&gt;SetHandler None&lt;br/&gt;&lt;/LocationMatch&gt;&lt;br/&gt;&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;Of course you have to have all you media files in folders like css, js, img... or anything that you specify in last regular expression.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; See this &lt;a href="http://vaig.be/2008/05/09/unable-to-define-my-urls-exactly-my-way-resignation-statement/"&gt;post&lt;/a&gt; before using this approach.&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Normalize name and size images in Django (and adding thumbnails)</title><link href="https://datapythonista.github.io/blog/normalize-name-and-size-images-in.html" rel="alternate"></link><published>2007-12-10T01:19:00+00:00</published><updated>2007-12-10T01:19:00+00:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-12-10:/blog/normalize-name-and-size-images-in.html</id><summary type="html">&lt;p&gt;I wanted to assign an image to every element in a model. I wanted them to have a thumbnail, and to have normalized sizes and names. And of course, I want my application to do everything automatically.&lt;br/&gt;&lt;br/&gt;The best method I've found is next, modifying models.py (note that PIL …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I wanted to assign an image to every element in a model. I wanted them to have a thumbnail, and to have normalized sizes and names. And of course, I want my application to do everything automatically.&lt;br/&gt;&lt;br/&gt;The best method I've found is next, modifying models.py (note that PIL must be installed):&lt;br/&gt;&lt;code style="text-align: left"&gt;&lt;br/&gt;def rename_image(src, field, id):&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;file_ext = os.path.splitext(src)[1].lower().replace('jpg', 'jpeg')&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dst = 'img/uploaded/work_%s/%s_%s%s' % (field, field, id, file_ext)&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return dst&lt;br/&gt;&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;&lt;code style="text-align: left"&gt;&lt;br/&gt;def resize_image(src, dst, size):&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from PIL import Image&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;image = Image.open(src)&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;image.thumbnail(size, Image.ANTIALIAS)&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;image.save('%s%s' % (settings.MEDIA_ROOT, dst))&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return dst&lt;br/&gt;&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;&lt;code style="text-align: left"&gt;&lt;br/&gt;class MyModel(models.Model):&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;image = models.ImageField(upload_to='img/uploaded/work_image', verbose_name=_('imagen'))&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thumbnail = models.ImageField(editable=False, upload_to='img/uploaded/work_thumbnail')&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[...]&lt;br/&gt;&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;&lt;code style="text-align: left"&gt;&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;def save(self):&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(MyModel, self).save()&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if self.image != rename_image(self.image, 'image', self.id):&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;original_filename = self.get_image_filename()&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self.thumbnail = resize_image(original_filename, rename_image(original_filename, 'thumbnail', self.id), [100, 75])&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;self.image = resize_image(original_filename, rename_image(original_filename, 'image', self.id), [640, 480])&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if os.path.exists(original_filename):&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;os.remove(original_filename)&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(MyModel, self).save()&lt;br/&gt;&lt;/code&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>TransDb: Django’s i18n for database</title><link href="https://datapythonista.github.io/blog/transdb-djangos-i18n-for-database.html" rel="alternate"></link><published>2007-12-08T07:15:00+00:00</published><updated>2007-12-08T07:15:00+00:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-12-08:/blog/transdb-djangos-i18n-for-database.html</id><summary type="html">&lt;p&gt;Today I've created my own code for having (in Django) fields in more than one language stored in database. There were some other packages, but none of them useful for me (as commented &lt;a href="http://vaig.be/2007/07/11/django-database-texts-translated/"&gt;here&lt;/a&gt;).&lt;br/&gt;&lt;br/&gt;TransDb's main goal is that is simple, for application users, application programmers, and the code itself …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I've created my own code for having (in Django) fields in more than one language stored in database. There were some other packages, but none of them useful for me (as commented &lt;a href="http://vaig.be/2007/07/11/django-database-texts-translated/"&gt;here&lt;/a&gt;).&lt;br/&gt;&lt;br/&gt;TransDb's main goal is that is simple, for application users, application programmers, and the code itself. Some work is still missing, but there is a working version at &lt;a href="http://code.google.com/p/transdb/"&gt;TransDb Google Code page&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;Any comment will be appreciate.&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Django is “order sensitive”</title><link href="https://datapythonista.github.io/blog/django-is-order-sensitive.html" rel="alternate"></link><published>2007-11-14T00:21:00+00:00</published><updated>2007-11-14T00:21:00+00:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-11-14:/blog/django-is-order-sensitive.html</id><summary type="html">&lt;p&gt;Sometimes I forget that django's settings.py is a Python script, and not a plain configuration file. And forgetting it causes django to behave unexpectedly. A couple of examples that happened to are related to array sorting.&lt;br/&gt;&lt;br/&gt;Some days ago I customized middleware classes, and after that I left on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes I forget that django's settings.py is a Python script, and not a plain configuration file. And forgetting it causes django to behave unexpectedly. A couple of examples that happened to are related to array sorting.&lt;br/&gt;&lt;br/&gt;Some days ago I customized middleware classes, and after that I left on my setting.py:&lt;br/&gt;&lt;br/&gt;MIDDLEWARE_CLASSES = (&lt;br/&gt;'django.middleware.locale.LocaleMiddleware',&lt;br/&gt;'django.contrib.sessions.middleware.SessionMiddleware',&lt;br/&gt;'django.contrib.auth.middleware.AuthenticationMiddleware',&lt;br/&gt;'django.middleware.doc.XViewMiddleware',&lt;br/&gt;'django.middleware.common.CommonMiddleware',&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;With it, LocaleMiddleware doesn't work, because it requires SessionMiddleware that isn't loaded when LocaleMiddleware is executed.&lt;br/&gt;&lt;br/&gt;Today's issue was something similar, but with templates. I customized some admin templates, copying them to a directory loaded with filesystem loader. My settings.py looked like:&lt;br/&gt;&lt;br/&gt;TEMPLATE_LOADERS = (&lt;br/&gt;'django.template.loaders.app_directories.load_template_source',&lt;br/&gt;'django.template.loaders.filesystem.load_template_source',&lt;br/&gt;)&lt;br/&gt;&lt;br/&gt;With it, loaders looked first to application template directories, including the admin ones, so overriding template was never used.&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Common web features in Django</title><link href="https://datapythonista.github.io/blog/common-web-features-in-django.html" rel="alternate"></link><published>2007-11-11T02:30:00+00:00</published><updated>2007-11-11T02:30:00+00:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-11-11:/blog/common-web-features-in-django.html</id><summary type="html">&lt;p&gt;Here is a brief list of common web features, and the best way I know for achieving it in Django:&lt;br/&gt;- &lt;br/&gt;    &lt;li&gt;&lt;strong&gt;Breadcrumbs:&lt;/strong&gt; use {{ block.super }} for recursive link inheritance [&lt;a href="http://www.martin-geber.com/weblog/2007/10/25/breadcrumbs-django-templates/"&gt;more info&lt;/a&gt;]&lt;/li&gt;&lt;br/&gt; &lt;li&gt;&lt;strong&gt;Back button:&lt;/strong&gt; use {{ request.META.HTTP_REFERER }} for linking to referring URL&lt;em&gt;&lt;/li&gt;&lt;br/&gt;   &lt;li&gt;&lt;strong&gt;Highlight active menu option:&lt;/strong&gt; use {{ request.path }} to know …&lt;/li&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is a brief list of common web features, and the best way I know for achieving it in Django:&lt;br/&gt;- &lt;br/&gt;    &lt;li&gt;&lt;strong&gt;Breadcrumbs:&lt;/strong&gt; use {{ block.super }} for recursive link inheritance [&lt;a href="http://www.martin-geber.com/weblog/2007/10/25/breadcrumbs-django-templates/"&gt;more info&lt;/a&gt;]&lt;/li&gt;&lt;br/&gt; &lt;li&gt;&lt;strong&gt;Back button:&lt;/strong&gt; use {{ request.META.HTTP_REFERER }} for linking to referring URL&lt;em&gt;&lt;/li&gt;&lt;br/&gt;   &lt;li&gt;&lt;strong&gt;Highlight active menu option:&lt;/strong&gt; use {{ request.path }} to know requested URL and compare it with menu options * [&lt;a href="http://gnuvince.wordpress.com/2007/09/14/a-django-template-tag-for-the-current-active-page/"&gt;more info&lt;/a&gt;]&lt;/li&gt;&lt;br/&gt; &lt;li&gt;&lt;strong&gt;Pagination:&lt;/strong&gt; use 'django.views.generic.list_detail.object_list' generic view [&lt;a href="http://www.djangoproject.com/documentation/generic_views/#django-views-generic-list-detail-object-list"&gt;more info&lt;/a&gt;]&lt;/li&gt;&lt;br/&gt;
&lt;br/&gt;&lt;/em&gt; it's needed to add 'request' module to &lt;a href="http://www.djangoproject.com/documentation/settings/#template-context-processors"&gt;TEMPLATE_CONTEXT_PROCESSORS&lt;/a&gt; on settings.py&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>DSNP 0.11 released</title><link href="https://datapythonista.github.io/blog/dsnp-011-released.html" rel="alternate"></link><published>2007-10-26T16:12:00+01:00</published><updated>2007-10-26T16:12:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-10-26:/blog/dsnp-011-released.html</id><summary type="html">&lt;p&gt;&lt;a href="http://code.google.com/p/dsnp/"&gt;DSNP&lt;/a&gt; is a shell script that automatically setups a new Django project, with user custom settings.&lt;br/&gt;&lt;br/&gt;It's specially useful for users that create many Django projects following same patterns.&lt;br/&gt;&lt;br/&gt;After a first very simple release, version 0.11 has released, that includes many validations for avoiding user errors, support for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://code.google.com/p/dsnp/"&gt;DSNP&lt;/a&gt; is a shell script that automatically setups a new Django project, with user custom settings.&lt;br/&gt;&lt;br/&gt;It's specially useful for users that create many Django projects following same patterns.&lt;br/&gt;&lt;br/&gt;After a first very simple release, version 0.11 has released, that includes many validations for avoiding user errors, support for PostgresSQL as well as for MySQL, and many more improvements. See &lt;a href="http://dsnp.googlecode.com/svn/trunk/CHANGELOG"&gt;CHANGELOG&lt;/a&gt; for full list.&lt;br/&gt;&lt;br/&gt;Enjoy!&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="DSNP"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Django spanish localflavor at trunk</title><link href="https://datapythonista.github.io/blog/django-spanish-localflavor-at-trunk.html" rel="alternate"></link><published>2007-10-20T16:40:00+01:00</published><updated>2007-10-20T16:40:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-10-20:/blog/django-spanish-localflavor-at-trunk.html</id><summary type="html">&lt;p&gt;Today has been committed to Django trunk version spanish localflavor patch.&lt;br/&gt;&lt;br/&gt;It includes selector fields for provinces and regions, and validation form functions for postal codes, phone numbers, and nif and ccc codes.&lt;br/&gt;&lt;br/&gt;Patch was started by Ricardo J Barrios, contributed by Rob Oggie and finished by myself, who mistakenly …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today has been committed to Django trunk version spanish localflavor patch.&lt;br/&gt;&lt;br/&gt;It includes selector fields for provinces and regions, and validation form functions for postal codes, phone numbers, and nif and ccc codes.&lt;br/&gt;&lt;br/&gt;Patch was started by Ricardo J Barrios, contributed by Rob Oggie and finished by myself, who mistakenly doesn't appear as an author of it. :)&lt;br/&gt;&lt;br/&gt;I hope you like it, and comments always will be very welcome.&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>DSNP (Django Start New Project)</title><link href="https://datapythonista.github.io/blog/dsnp-django-start-new-project.html" rel="alternate"></link><published>2007-10-14T22:10:00+01:00</published><updated>2007-10-14T22:10:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-10-14:/blog/dsnp-django-start-new-project.html</id><summary type="html">&lt;p&gt;&lt;a href="http://code.google.com/p/dsnp"&gt;DSNP&lt;/a&gt; is a shell script that automatically creates Django's new projects.&lt;br/&gt;&lt;br/&gt;Django is a powerful framework, mostly designed for big applications, but many people uses it for developing little (and many) projects. DSNP eases creation of new projects, automating repetitive steps, and standardizing projects.&lt;br/&gt;&lt;br/&gt;Additionally to creating Django's files and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://code.google.com/p/dsnp"&gt;DSNP&lt;/a&gt; is a shell script that automatically creates Django's new projects.&lt;br/&gt;&lt;br/&gt;Django is a powerful framework, mostly designed for big applications, but many people uses it for developing little (and many) projects. DSNP eases creation of new projects, automating repetitive steps, and standardizing projects.&lt;br/&gt;&lt;br/&gt;Additionally to creating Django's files and directories, DSNP can create a database (and a user) for your project, and can setup apache with necessary changes.&lt;br/&gt;&lt;br/&gt;DSNP skeleton consists on next:&lt;br/&gt;.&lt;br/&gt;./public&lt;br/&gt;./public/js&lt;br/&gt;./public/js/admin&lt;br/&gt;./public/css&lt;br/&gt;./public/img&lt;br/&gt;./public/img/admin&lt;br/&gt;./public/model_data&lt;br/&gt;./private&lt;br/&gt;./private/www&lt;br/&gt;./private/www/templates&lt;br/&gt;&lt;br/&gt;DSNP doesn't need an installation, just edit dsnp.sh, customize parameters with your preferences, and execute.&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="DSNP"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Django catalan group created</title><link href="https://datapythonista.github.io/blog/django-catalan-group-created_30.html" rel="alternate"></link><published>2007-09-30T22:57:00+01:00</published><updated>2007-09-30T22:57:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-09-30:/blog/django-catalan-group-created_30.html</id><summary type="html">&lt;p&gt;A new Django community has been created for Django users/developers that speak Catalan, or live in Catalonia.&lt;/p&gt;
&lt;p&gt;Main reasons for its creation are:
&lt;ul&gt;
&lt;li&gt;Provide a resource where Catalan users can ask django questions in their own language.&lt;/li&gt;
&lt;li&gt;Coordinate Django Catalan specific jobs, mostly Catalan translation (that now is up …&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A new Django community has been created for Django users/developers that speak Catalan, or live in Catalonia.&lt;/p&gt;
&lt;p&gt;Main reasons for its creation are:
&lt;ul&gt;
&lt;li&gt;Provide a resource where Catalan users can ask django questions in their own language.&lt;/li&gt;
&lt;li&gt;Coordinate Django Catalan specific jobs, mostly Catalan translation (that now is up to date).&lt;/li&gt;
&lt;li&gt;Be in touch with other Django community members in our little country (for business, beers...).&lt;/li&gt;
&lt;/ul&gt;
Want to join us? &lt;a href="http://groups.google.com/group/django-cat"&gt;http://groups.google.com/group/django-cat&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Django spanish localflavor</title><link href="https://datapythonista.github.io/blog/django-spanish-localflavor.html" rel="alternate"></link><published>2007-09-16T04:17:00+01:00</published><updated>2007-09-16T04:17:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-09-16:/blog/django-spanish-localflavor.html</id><summary type="html">&lt;p&gt;Django sprint has finished, but not Django work. Today I've written some lines of code for adding some new features on Django. In this case, I've programmed a validation function for spanish NIF identification number. I've also created a couple of files with useful spanish data (regions and provinces in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Django sprint has finished, but not Django work. Today I've written some lines of code for adding some new features on Django. In this case, I've programmed a validation function for spanish NIF identification number. I've also created a couple of files with useful spanish data (regions and provinces in Spain).&lt;br/&gt;&lt;br/&gt;The spanish localflavor package was created some months ago, but not yet submitted to subversion. I hope with this contribution (and more that I'm going to do) we can finish it soon.&lt;br/&gt;&lt;br/&gt;You can check a detailed status on this &lt;a href="http://code.djangoproject.com/ticket/4036"&gt;ticket&lt;/a&gt;.&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Django Sprint</title><link href="https://datapythonista.github.io/blog/django-sprint.html" rel="alternate"></link><published>2007-09-06T17:31:00+01:00</published><updated>2007-09-06T17:31:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-09-06:/blog/django-sprint.html</id><content type="html">&lt;p&gt;On September 14th it is scheduled a Django Sprint, for reducing tickets, and try to get a new release soon. It will be based on Chicago and Mountain View, and over the Internet.&lt;br/&gt;&lt;br/&gt;More information at &lt;a href="http://groups.google.com/group/django-developers/browse_thread/thread/9ed7681e2f567472"&gt;list thread&lt;/a&gt; and &lt;a href="http://code.djangoproject.com/wiki/Sprint14Sep"&gt;wiki page&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;See you there!&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Django issue with PHP mhash</title><link href="https://datapythonista.github.io/blog/django-issue-with-php-mhash.html" rel="alternate"></link><published>2007-08-03T13:17:00+01:00</published><updated>2007-08-03T13:17:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-08-03:/blog/django-issue-with-php-mhash.html</id><summary type="html">&lt;p&gt;After installing django, and running with apache, next error could appear:&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Looks like your browser isn't configured to accept cookies. Please enable cookies, reload this page, and try again.&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;It is possible that actually you browser isn't configured to accept cookies, but it is also possible that your apache server …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After installing django, and running with apache, next error could appear:&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Looks like your browser isn't configured to accept cookies. Please enable cookies, reload this page, and try again.&lt;/strong&gt;&lt;br/&gt;&lt;br/&gt;It is possible that actually you browser isn't configured to accept cookies, but it is also possible that your apache server is running with PHP support with mhash module enabled; then it is an unsolved and known issue.&lt;br/&gt;&lt;br/&gt;This issue causes python md5 module to get unexpected results, when executed in same apache server than mhash PHP module. &lt;a href="http://mail-archives.apache.org/mod_mbox/httpd-python-dev/200706.mbox/%3C27092147.1183094044465.JavaMail.jira@brutus%3E"&gt;Here&lt;/a&gt; it is a more detailed description.&lt;br/&gt;&lt;br/&gt;It seems to be no solution for that (just uninstall mhash module, or whole php support if possible).&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Django database texts translated</title><link href="https://datapythonista.github.io/blog/django-database-texts-translated.html" rel="alternate"></link><published>2007-07-12T01:36:00+01:00</published><updated>2007-07-12T01:36:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-07-12:/blog/django-database-texts-translated.html</id><content type="html">&lt;p&gt;Django i18n is really good, but an important feature is missing... a very simple way (for users) for translating database stored labels.&lt;br/&gt;&lt;br/&gt;I've checked 
&lt;img alt="" src="http://vaig.be/wp-content/uploads/django_mlang_small.png"&gt;&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry><entry><title>Django TODO (my point of view)</title><link href="https://datapythonista.github.io/blog/django-todo-my-point-of-view.html" rel="alternate"></link><published>2007-07-08T13:38:00+01:00</published><updated>2007-07-08T13:38:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-07-08:/blog/django-todo-my-point-of-view.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt; is a very powerful and very well done Web framework, but some things are missing - in my opinion -.&lt;br/&gt;&lt;ol&gt;&lt;br/&gt;   &lt;li&gt;Specific way to allow saving multilingual texts on database.&lt;/li&gt;&lt;br/&gt;  &lt;li&gt;Reporting system.&lt;/li&gt;&lt;br/&gt; &lt;li&gt;Another edit_inline mode, with a delete button, and an edit button that links to the item page.&lt;/li&gt;&lt;br/&gt;   &lt;li&gt;Improve database synchronization …&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt; is a very powerful and very well done Web framework, but some things are missing - in my opinion -.&lt;br/&gt;&lt;ol&gt;&lt;br/&gt;   &lt;li&gt;Specific way to allow saving multilingual texts on database.&lt;/li&gt;&lt;br/&gt;  &lt;li&gt;Reporting system.&lt;/li&gt;&lt;br/&gt; &lt;li&gt;Another edit_inline mode, with a delete button, and an edit button that links to the item page.&lt;/li&gt;&lt;br/&gt;   &lt;li&gt;Improve database synchronization and make it create fields in existing tables.&lt;/li&gt;&lt;br/&gt;    &lt;li&gt;Allow storing files in database&lt;/li&gt;&lt;br/&gt;&lt;/ol&gt;&lt;br/&gt;I hope having enough time for contributing to it. Thanks to Django team for that great work!&lt;/p&gt;</content><category term="misc"></category><category term="Applications"></category><category term="Django"></category><category term="IT"></category></entry></feed>