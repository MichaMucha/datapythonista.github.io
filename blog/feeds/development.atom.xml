<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>datapythonista blog - Development</title><link href="https://datapythonista.github.io/blog/" rel="alternate"></link><link href="https://datapythonista.github.io/blog/feeds/development.atom.xml" rel="self"></link><id>https://datapythonista.github.io/blog/</id><updated>2008-08-28T19:05:00+01:00</updated><subtitle>about me</subtitle><entry><title>Compare two XML strings in Python</title><link href="https://datapythonista.github.io/blog/compare-two-xml-strings-in-python.html" rel="alternate"></link><published>2008-08-28T19:05:00+01:00</published><updated>2008-08-28T19:05:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2008-08-28:/blog/compare-two-xml-strings-in-python.html</id><summary type="html">&lt;p&gt;I had to compare two XML strings for some unit tests, and if you want to do it without considering the indentation, or the newlines, it is a little bit tricky.&lt;br/&gt;&lt;br/&gt;I thought that parsing the original xml and returning it again (using minidom), I'd got a raw string without …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I had to compare two XML strings for some unit tests, and if you want to do it without considering the indentation, or the newlines, it is a little bit tricky.&lt;br/&gt;&lt;br/&gt;I thought that parsing the original xml and returning it again (using minidom), I'd got a raw string without any meaningless space, or any newline, but actually it returned the original string. Using toprettyxml() method also returns a trivial result, based on the original string (even when you specify the indent and the newline characters).&lt;br/&gt;&lt;br/&gt;So the best way I've found by now is to write a custom function that returns what I want, an XML string without any trivial character between tag and tag. Here you have the code:&lt;br/&gt;&lt;br/&gt;&lt;code&gt;def raw_xml(xml_str):&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from xml.dom import minidom&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;xml = minidom.parseString(xml_str)&lt;br/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return u''.join([unicode(line).strip() for line in xml.toprettyxml().splitlines()])&lt;br/&gt;&lt;/code&gt;&lt;/p&gt;</content><category term="Development"></category><category term="IT"></category></entry><entry><title>File encodings</title><link href="https://datapythonista.github.io/blog/file-encodings.html" rel="alternate"></link><published>2007-06-07T15:52:00+01:00</published><updated>2007-06-07T15:52:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-06-07:/blog/file-encodings.html</id><summary type="html">&lt;p&gt;Many times, specially when writing web pages, you have to deal with texts with different encodes (if web site isn't in us-ascii, of course).  Here are some useful tips for not spending too much time with this:&lt;br/&gt;&lt;br/&gt;&lt;em&gt;bash# &lt;/em&gt;&lt;em&gt;file -i &lt;filename&gt;&lt;/em&gt; (for knowing the encoding for a specific file)&lt;br/&gt;&lt;br/&gt;&lt;em&gt;vim# &lt;/em&gt;&lt;em&gt;:set …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many times, specially when writing web pages, you have to deal with texts with different encodes (if web site isn't in us-ascii, of course).  Here are some useful tips for not spending too much time with this:&lt;br/&gt;&lt;br/&gt;&lt;em&gt;bash# &lt;/em&gt;&lt;em&gt;file -i &lt;filename&gt;&lt;/em&gt; (for knowing the encoding for a specific file)&lt;br/&gt;&lt;br/&gt;&lt;em&gt;vim# &lt;/em&gt;&lt;em&gt;:set fileencoding=utf-8&lt;/em&gt; (for changing encoding of current file, converting characters from one charset to the new one in a human understandable way)&lt;br/&gt;&lt;br/&gt;&lt;em&gt;vim# :set encoding=utf-8&lt;/em&gt; (for setting encode of new files; default is system locale)&lt;br/&gt;&lt;br/&gt;Remember that those thinks just apply to plain files, that are saved without any header or any information about encoding (editors try to figure out encodes).&lt;br/&gt;&lt;br/&gt;A little bit offtopic, but an interesting vim command is also:&lt;br/&gt;&lt;br/&gt;&lt;em&gt;vim# :set ff=unix&lt;/em&gt; (for changing eol from dos/mac to unix)&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; If you have many files to convert, or don't know how to use vim... :) you can use GNU &lt;em&gt;iconv&lt;/em&gt; program.&lt;/p&gt;</content><category term="Development"></category><category term="Systems"></category><category term="IT"></category></entry><entry><title>Firefox Extensions</title><link href="https://datapythonista.github.io/blog/firefox-extensions.html" rel="alternate"></link><published>2007-04-25T15:24:00+01:00</published><updated>2007-04-25T15:24:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-04-25:/blog/firefox-extensions.html</id><summary type="html">&lt;p&gt;When developing web pages is essential having a good set of &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_0"&gt;firefox&lt;/span&gt; extensions. It  gives you powerful tools for checking &lt;span class="blsp-spelling-corrected" id="SPELLING_ERROR_1"&gt;accessibility&lt;/span&gt;, and for getting more information on your website, and are also good fot getting information about all websites...&lt;br/&gt;&lt;br/&gt;Those are my favourites:&lt;br/&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/249"&gt;Html &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_2"&gt;Validator&lt;/span&gt;&lt;/a&gt;: Quick view if you are …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When developing web pages is essential having a good set of &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_0"&gt;firefox&lt;/span&gt; extensions. It  gives you powerful tools for checking &lt;span class="blsp-spelling-corrected" id="SPELLING_ERROR_1"&gt;accessibility&lt;/span&gt;, and for getting more information on your website, and are also good fot getting information about all websites...&lt;br/&gt;&lt;br/&gt;Those are my favourites:&lt;br/&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/249"&gt;Html &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_2"&gt;Validator&lt;/span&gt;&lt;/a&gt;: Quick view if you are following standards.&lt;br/&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/2007"&gt;Live PageRank&lt;/a&gt;: Quick view on site's PageRank.&lt;br/&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/60"&gt;Web Developer&lt;/a&gt;: Many tools, specially for disabling &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_3"&gt;css&lt;/span&gt; or javascript, and for resizing screen.&lt;/p&gt;</content><category term="Applications"></category><category term="Development"></category><category term="IT"></category></entry><entry><title>bug in IE</title><link href="https://datapythonista.github.io/blog/bug-in-ie.html" rel="alternate"></link><published>2007-04-07T19:39:00+01:00</published><updated>2007-04-07T19:39:00+01:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-04-07:/blog/bug-in-ie.html</id><summary type="html">&lt;p&gt;It's known that Microsoft Internet Explorer usually shows pages in a different way than good web programmers expect. Luckily those differences diminish when using XHTML Strict and CSS, but sometimes we are surprised for some huge bugs.&lt;br/&gt;&lt;br/&gt;This is the case when trying to create an empty layer, something like …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's known that Microsoft Internet Explorer usually shows pages in a different way than good web programmers expect. Luckily those differences diminish when using XHTML Strict and CSS, but sometimes we are surprised for some huge bugs.&lt;br/&gt;&lt;br/&gt;This is the case when trying to create an empty layer, something like that:&lt;br/&gt;&lt;span style="color: #999999"&gt;our_style {&lt;/span&gt;&lt;br/&gt;&lt;span style="color: #999999"&gt;    height: 1px;&lt;/span&gt;&lt;br/&gt;&lt;span style="color: #999999"&gt;    width: 100px;&lt;/span&gt;&lt;br/&gt;&lt;span style="color: #999999"&gt;    background-color: black;&lt;/span&gt;&lt;br/&gt;&lt;span style="color: #999999"&gt;}&lt;/span&gt;&lt;br/&gt;[...]&lt;br/&gt;&lt;span style="color: #999999"&gt;&lt;div class="our_style"&gt;&lt;/div&gt;&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;Obviously we expect something like a horizontal line, but IE increases our layer height to 10px 18px or whatever...&lt;br/&gt;&lt;br/&gt;This time there is a easy solution for solving the bug, that is just adding a zero font size for the layer:&lt;br/&gt;&lt;br/&gt;&lt;span style="color: #999999"&gt;our_style {&lt;/span&gt;&lt;br/&gt;&lt;span style="color: #999999"&gt;    &lt;span style="font-weight: bold; color: #000000"&gt;font-size: 0px&lt;/span&gt;&lt;/span&gt;&lt;br/&gt;&lt;span style="color: #999999"&gt;     height: 1px;&lt;/span&gt;&lt;br/&gt;&lt;span style="color: #999999"&gt;     width: 100px;&lt;/span&gt;&lt;br/&gt;&lt;span style="color: #999999"&gt;     background-color: black;&lt;/span&gt;&lt;br/&gt;&lt;span style="color: #999999"&gt; }&lt;/span&gt;&lt;/p&gt;</content><category term="Development"></category><category term="IT"></category></entry><entry><title>Web 2.0</title><link href="https://datapythonista.github.io/blog/web-20.html" rel="alternate"></link><published>2007-03-07T15:15:00+00:00</published><updated>2007-03-07T15:15:00+00:00</updated><author><name>Marc</name></author><id>tag:datapythonista.github.io,2007-03-07:/blog/web-20.html</id><summary type="html">&lt;p&gt;Those days everybody is using Web 2.0 and AJAX, but everyone understand a different meaning of those technologies. Here I'll explain my interpretation.&lt;br/&gt;&lt;br/&gt;In short I'll use this formula:&lt;br/&gt;&lt;span style="font-weight: bold"&gt;Web 2.0 = &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_0"&gt;XHTML&lt;/span&gt; Strict + &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_1"&gt;CSS&lt;/span&gt;2 + AJAX&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;It means the end of using html tables for positioning objects in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Those days everybody is using Web 2.0 and AJAX, but everyone understand a different meaning of those technologies. Here I'll explain my interpretation.&lt;br/&gt;&lt;br/&gt;In short I'll use this formula:&lt;br/&gt;&lt;span style="font-weight: bold"&gt;Web 2.0 = &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_0"&gt;XHTML&lt;/span&gt; Strict + &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_1"&gt;CSS&lt;/span&gt;2 + AJAX&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;It means the end of using html tables for positioning objects in the page (HTML 4.0 or &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_2"&gt;XHTML&lt;/span&gt; Transactional). Web 2.0 uses &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_3"&gt;CSS&lt;/span&gt;2 properties to do it. In this formula AJAX is the &lt;span class="blsp-spelling-error" id="SPELLING_ERROR_4"&gt;XMLHttpRequest&lt;/span&gt; JavaScript object, that allows to get HTTP data using JavaScript code (and prevents reloading the whole page).&lt;br/&gt;&lt;br/&gt;A good reference for more of those technologies is &lt;a href="http://www.w3schools.com/"&gt;W3Schools&lt;/a&gt;. In addition there is a very good presentation for best practices (and &lt;span class="blsp-spelling-corrected" id="SPELLING_ERROR_5"&gt;accessibility&lt;/span&gt;) called &lt;a href="http://www.thefutureoftheweb.com/talks/2006-10-ajax-experience/slides/"&gt;&lt;span class="blsp-spelling-error" id="SPELLING_ERROR_6"&gt;Unobstructive&lt;/span&gt; AJAX&lt;/a&gt;.&lt;/p&gt;</content><category term="Development"></category><category term="IT"></category></entry></feed>